{"version":3,"file":"index-Cdby5AzQ.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../node_modules/react-dom/client.js","../../node_modules/@remix-run/router/dist/router.js","../../node_modules/react-router/dist/index.js","../../node_modules/react-router-dom/dist/index.js","../../src/contexts/ETFContext.tsx","../../src/contexts/ThresholdContext.tsx","../../src/contexts/DataContext.tsx","../../node_modules/lucide-react/dist/esm/defaultAttributes.js","../../node_modules/lucide-react/dist/esm/createLucideIcon.js","../../node_modules/lucide-react/dist/esm/icons/bar-chart-3.js","../../node_modules/lucide-react/dist/esm/icons/calculator.js","../../node_modules/lucide-react/dist/esm/icons/calendar.js","../../node_modules/lucide-react/dist/esm/icons/dollar-sign.js","../../node_modules/lucide-react/dist/esm/icons/download.js","../../node_modules/lucide-react/dist/esm/icons/refresh-cw.js","../../node_modules/lucide-react/dist/esm/icons/search.js","../../node_modules/lucide-react/dist/esm/icons/trending-down.js","../../node_modules/lucide-react/dist/esm/icons/trending-up.js","../../node_modules/lucide-react/dist/esm/icons/x.js","../../src/pages/Cycles.tsx","../../src/pages/Simulation.tsx","../../src/pages/Dashboard.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","/**\n * @remix-run/router v1.23.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/v6/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\nfunction matchRoutesImpl(routes, locationArg, basename, allowPartial) {\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded, allowPartial);\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname, allowPartial) {\n  if (allowPartial === void 0) {\n    allowPartial = false;\n  }\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    let route = meta.route;\n    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {\n      match = matchPath({\n        path: meta.relativePath,\n        caseSensitive: meta.caseSensitive,\n        end: false\n      }, remainingPathname);\n    }\n    if (!match) {\n      return null;\n    }\n    Object.assign(matchedParams, match.params);\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/v6/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/v6/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(v => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/v6/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n *\n * @deprecated The `json` method is deprecated in favor of returning raw objects.\n * This method will be removed in v7.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass DataWithResponseInit {\n  constructor(data, init) {\n    this.type = \"DataWithResponseInit\";\n    this.data = data;\n    this.init = init || null;\n  }\n}\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nfunction data(data, init) {\n  return new DataWithResponseInit(data, typeof init === \"number\" ? {\n    status: init\n  } : init);\n}\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n/**\n * @deprecated The `defer` method is deprecated in favor of returning raw\n * objects. This method will be removed in v7.\n */\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst replace = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.patchRoutesOnNavigation;\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialMatchesIsFOW = false;\n  let initialErrors = null;\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(initialMatches, dataRoutes, init.history.location.pathname);\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n  let initialized;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(null, dataRoutes, init.history.location.pathname);\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatchesIsFOW = true;\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some(m => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some(m => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(m => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    } else {\n      initialized = initialMatches.every(m => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = new Set();\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate = undefined;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (unblockBlockerHistoryUpdate) {\n        unblockBlockerHistoryUpdate();\n        unblockBlockerHistoryUpdate = undefined;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        let nextHistoryUpdatePromise = new Promise(resolve => {\n          unblockBlockerHistoryUpdate = resolve;\n        });\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked, after the url\n            // restoration is also complete.  See:\n            // https://github.com/remix-run/react-router/issues/11613\n            nextHistoryUpdatePromise.then(() => init.history.go(delta));\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Remove any lingering deleted fetchers that have already been removed\n    // from state.fetchers\n    deletedFetchers.forEach(key => {\n      if (!state.fetchers.has(key) && !fetchControllers.has(key)) {\n        deletedFetchersKeys.push(key);\n      }\n    });\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      viewTransitionOpts: opts.viewTransitionOpts,\n      flushSync: opts.flushSync === true\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    } else {\n      // We already called deleteFetcher() on these, can remove them from this\n      // Set now that we've handed the keys off to the data layer\n      deletedFetchersKeys.forEach(key => deletedFetchers.delete(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.viewTransition,\n      flushSync\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation,\n      // Proxy through any rending view transition\n      enableViewTransition: pendingViewTransitionEnabled === true\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = opts != null && opts.initialHydration && state.matches && state.matches.length > 0 && !initialMatchesIsFOW ?\n    // `matchRoutes()` has already been called if we're in here via `router.initialize()`\n    state.matches : matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial hydration will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (matches && state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        error,\n        notFoundMatches,\n        route\n      } = handleNavigational404(location.pathname);\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionResult;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [findNearestBoundary(matches).route.id, {\n        type: ResultType.error,\n        error: opts.pendingError\n      }];\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(request, location, opts.submission, matches, fogOfWar.active, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionResult.shortCircuited) {\n        return;\n      }\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404) {\n          pendingNavigationController = null;\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error\n            }\n          });\n          return;\n        }\n      }\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n      // Create a GET request for the loaders\n      request = createClientSideRequest(init.history, request.url, request.signal);\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, fogOfWar.active, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches: updatedMatches || matches\n    }, getActionDataForCommit(pendingActionResult), {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, isFogOfWar, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [boundaryId, {\n            type: ResultType.error,\n            error: discoverResult.error\n          }]\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          notFoundMatches,\n          error,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [route.id, {\n            type: ResultType.error,\n            error\n          }]\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", state, request, [actionMatch], matches, null);\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(result.response.headers.get(\"Location\"), new URL(request.url), basename);\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result]\n      };\n    }\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result]\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionResult) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState = !isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration);\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(_extends({\n          navigation: loadingNavigation\n        }, actionData !== undefined ? {\n          actionData\n        } : {}), {\n          flushSync\n        });\n      }\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: discoverResult.error\n          }\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          error,\n          notFoundMatches,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error\n          }\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null\n      }, getActionDataForCommit(pendingActionResult), updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (shouldUpdateNavigationState) {\n      let updates = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      abortFetcher(rf.key);\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    // Preserve SSR errors during partial hydration\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      errors = _extends({}, state.errors, errors);\n    }\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      matches,\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getUpdatedActionData(pendingActionResult) {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n  function getUpdatedRevalidatingFetchers(revalidatingFetchers) {\n    revalidatingFetchers.forEach(rf => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    abortFetcher(key);\n    let flushSync = (opts && opts.flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    let preventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    function detectAndHandle405Error(m) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId\n        });\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return true;\n      }\n      return false;\n    }\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(requestMatches, new URL(fetchRequest.url).pathname, fetchRequest.signal, key);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\"action\", state, fetchRequest, [match], requestMatches, key);\n    let actionResult = actionResults[match.route.id];\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n            preventScrollReset\n          });\n        }\n      }\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match.route.id, actionResult]);\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      abortFetcher(staleKey);\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(revalidationRequest, redirect.result, false, {\n        preventScrollReset\n      });\n    }\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(revalidationRequest, redirect.result, false, {\n        preventScrollReset\n      });\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, new URL(fetchRequest.url).pathname, fetchRequest.signal, key);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\"loader\", state, fetchRequest, [match], matches, key);\n    let result = results[match.route.id];\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false, {\n          preventScrollReset\n        });\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(request, redirect, isNavigation, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      preventScrollReset,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(location, new URL(request.url), basename);\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true\n    });\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true || redirect.response.headers.has(\"X-Remix-Replace\") ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: location\n        }),\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    }\n  }\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, state, request, matchesToLoad, matches, fetcherKey) {\n    let results;\n    let dataResults = {};\n    try {\n      results = await callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties);\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach(m => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e\n        };\n      });\n      return dataResults;\n    }\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, future.v7_relativeSplatPath)\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(result);\n      }\n    }\n    return dataResults;\n  }\n  async function callLoadersAndMaybeResolveData(state, matches, matchesToLoad, fetchersToLoad, request) {\n    let currentMatches = state.matches;\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\"loader\", state, request, matchesToLoad, matches, null);\n    let fetcherResultsPromise = Promise.all(fetchersToLoad.map(async f => {\n      if (f.matches && f.match && f.controller) {\n        let results = await callDataStrategy(\"loader\", state, createClientSideRequest(init.history, f.path, f.controller.signal), [f.match], f.matches, f.key);\n        let result = results[f.match.route.id];\n        // Fetcher results are keyed by fetcher key from here on out, not routeId\n        return {\n          [f.key]: result\n        };\n      } else {\n        return Promise.resolve({\n          [f.key]: {\n            type: ResultType.error,\n            error: getInternalRouterError(404, {\n              pathname: f.path\n            })\n          }\n        });\n      }\n    }));\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce((acc, r) => Object.assign(acc, r), {});\n    await Promise.all([resolveNavigationDeferredResults(matches, loaderResults, request.signal, currentMatches, state.loaderData), resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad)]);\n    return {\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n      }\n      abortFetcher(key);\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n    // If this fetcher was previously marked for deletion, unmark it since we\n    // have a new instance\n    if (deletedFetchers.has(key)) {\n      deletedFetchers.delete(key);\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    // If we opted into the flag we can clear this now since we're calling\n    // deleteFetcher() at the end of updateState() and we've already handed the\n    // deleted fetcher keys off to the data layer.\n    // If not, we're eagerly calling deleteFetcher() and we need to keep this\n    // Set populated until the next updateState call, and we'll clear\n    // `deletedFetchers` then\n    if (future.v7_fetcherPersist) {\n      deletedFetchers.delete(key);\n    }\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    let count = (activeFetchers.get(key) || 0) - 1;\n    if (count <= 0) {\n      activeFetchers.delete(key);\n      deletedFetchers.add(key);\n      if (!future.v7_fetcherPersist) {\n        deleteFetcher(key);\n      }\n    } else {\n      activeFetchers.set(key, count);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    if (controller) {\n      controller.abort();\n      fetchControllers.delete(key);\n    }\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function handleNavigational404(pathname) {\n    let error = getInternalRouterError(404, {\n      pathname\n    });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(routesToUse);\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n    return {\n      notFoundMatches: matches,\n      route,\n      error\n    };\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function checkFogOfWar(matches, routesToUse, pathname) {\n    if (patchRoutesOnNavigationImpl) {\n      if (!matches) {\n        let fogMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n        return {\n          active: true,\n          matches: fogMatches || []\n        };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n          return {\n            active: true,\n            matches: partialMatches\n          };\n        }\n      }\n    }\n    return {\n      active: false,\n      matches: null\n    };\n  }\n  async function discoverRoutes(matches, pathname, signal, fetcherKey) {\n    if (!patchRoutesOnNavigationImpl) {\n      return {\n        type: \"success\",\n        matches\n      };\n    }\n    let partialMatches = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      let localManifest = manifest;\n      try {\n        await patchRoutesOnNavigationImpl({\n          signal,\n          path: pathname,\n          matches: partialMatches,\n          fetcherKey,\n          patch: (routeId, children) => {\n            if (signal.aborted) return;\n            patchRoutesImpl(routeId, children, routesToUse, localManifest, mapRouteProperties);\n          }\n        });\n      } catch (e) {\n        return {\n          type: \"error\",\n          error: e,\n          partialMatches\n        };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR && !signal.aborted) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n      if (signal.aborted) {\n        return {\n          type: \"aborted\"\n        };\n      }\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        return {\n          type: \"success\",\n          matches: newMatches\n        };\n      }\n      let newPartialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n      // Avoid loops if the second pass results in the same partial matches\n      if (!newPartialMatches || partialMatches.length === newPartialMatches.length && partialMatches.every((m, i) => m.route.id === newPartialMatches[i].route.id)) {\n        return {\n          type: \"success\",\n          matches: null\n        };\n      }\n      partialMatches = newPartialMatches;\n    }\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  function patchRoutes(routeId, children) {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties);\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext,\n      skipLoaderErrorBubbling,\n      dataStrategy\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, skipLoaderErrorBubbling === true, null);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext,\n      dataStrategy\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, false, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", request, [actionMatch], matches, isRouteRequest, requestContext, dataStrategy);\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null, [boundaryMatch.route.id, result]);\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null);\n    return _extends({}, context, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      }\n    }, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionHeaders: result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {}\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await callDataStrategy(\"loader\", request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy);\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy) {\n    let results = await callDataStrategyImpl(dataStrategy || defaultDataStrategy, type, null, request, matchesToLoad, matches, null, manifest, mapRouteProperties, requestContext);\n    let dataResults = {};\n    await Promise.all(matches.map(async match => {\n      if (!(match.route.id in results)) {\n        return;\n      }\n      let result = results[match.route.id];\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result;\n        // Throw redirects and let the server handle them with an HTTP redirect\n        throw normalizeRelativeRoutingRedirectResponse(response, request, match.route.id, matches, basename, future.v7_relativeSplatPath);\n      }\n      if (isResponse(result.result) && isRouteRequest) {\n        // For SSR single-route requests, we want to hand Responses back\n        // directly without unwrapping\n        throw result;\n      }\n      dataResults[match.route.id] = await convertDataStrategyResultToDataResult(result);\n    }));\n    return dataResults;\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Account for `?index` params when routing to the current location\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch) {\n    let nakedIndex = hasNakedIndexQuery(path.search);\n    if (activeRouteMatch.route.index && !nakedIndex) {\n      // Add one when we're targeting an index route\n      path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n    } else if (!activeRouteMatch.route.index && nakedIndex) {\n      // Remove existing ones when we're not\n      let params = new URLSearchParams(path.search);\n      let indexValues = params.getAll(\"index\");\n      params.delete(\"index\");\n      indexValues.filter(v => v).forEach(v => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? \"?\" + qs : \"\";\n    }\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes at/below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId, includeBoundary) {\n  if (includeBoundary === void 0) {\n    includeBoundary = false;\n  }\n  let index = matches.findIndex(m => m.route.id === boundaryId);\n  if (index >= 0) {\n    return matches.slice(0, includeBoundary ? index + 1 : index);\n  }\n  return matches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, initialHydration, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {\n  let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryMatches = matches;\n  if (initialHydration && state.errors) {\n    // On initial hydration, only consider matches up to _and including_ the boundary.\n    // This is inclusive to handle cases where a server loader ran successfully,\n    // a child server loader bubbled up to this route, but this route has\n    // `clientLoader.hydrate` so we want to still run the `clientLoader` so that\n    // we have a complete version of `loaderData`\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, Object.keys(state.errors)[0], true);\n  } else if (pendingActionResult && isErrorResult(pendingActionResult[1])) {\n    // If an action threw an error, we call loaders up to, but not including the\n    // boundary\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]);\n  }\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;\n  let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (initialHydration) {\n      return shouldLoadRouteOnHydration(route, state.loaderData, state.errors);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation ? false :\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial hydration (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (initialHydration || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction shouldLoadRouteOnHydration(route, loaderData, errors) {\n  // We dunno if we have a loader - gotta find out!\n  if (route.lazy) {\n    return true;\n  }\n  // No loader, nothing to initialize\n  if (!route.loader) {\n    return false;\n  }\n  let hasData = loaderData != null && loaderData[route.id] !== undefined;\n  let hasError = errors != null && errors[route.id] !== undefined;\n  // Don't run if we error'd during SSR\n  if (!hasData && hasError) {\n    return false;\n  }\n  // Explicitly opting-in to running on hydration\n  if (typeof route.loader === \"function\" && route.loader.hydrate === true) {\n    return true;\n  }\n  // Otherwise, run if we're not yet initialized with anything\n  return !hasData && !hasError;\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\nfunction patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties) {\n  var _childrenToPatch;\n  let childrenToPatch;\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(route, \"No route found to patch children into: routeId = \" + routeId);\n    if (!route.children) {\n      route.children = [];\n    }\n    childrenToPatch = route.children;\n  } else {\n    childrenToPatch = routesToUse;\n  }\n  // Don't patch in routes we already know about so that `patch` is idempotent\n  // to simplify user-land code. This is useful because we re-call the\n  // `patchRoutesOnNavigation` function for matched routes with params.\n  let uniqueChildren = children.filter(newRoute => !childrenToPatch.some(existingRoute => isSameRoute(newRoute, existingRoute)));\n  let newRoutes = convertRoutesToDataRoutes(uniqueChildren, mapRouteProperties, [routeId || \"_\", \"patch\", String(((_childrenToPatch = childrenToPatch) == null ? void 0 : _childrenToPatch.length) || \"0\")], manifest);\n  childrenToPatch.push(...newRoutes);\n}\nfunction isSameRoute(newRoute, existingRoute) {\n  // Most optimal check is by id\n  if (\"id\" in newRoute && \"id\" in existingRoute && newRoute.id === existingRoute.id) {\n    return true;\n  }\n  // Second is by pathing differences\n  if (!(newRoute.index === existingRoute.index && newRoute.path === existingRoute.path && newRoute.caseSensitive === existingRoute.caseSensitive)) {\n    return false;\n  }\n  // Pathless layout routes are trickier since we need to check children.\n  // If they have no children then they're the same as far as we can tell\n  if ((!newRoute.children || newRoute.children.length === 0) && (!existingRoute.children || existingRoute.children.length === 0)) {\n    return true;\n  }\n  // Otherwise, we look to see if every child in the new route is already\n  // represented in the existing route's children\n  return newRoute.children.every((aChild, i) => {\n    var _existingRoute$childr;\n    return (_existingRoute$childr = existingRoute.children) == null ? void 0 : _existingRoute$childr.some(bChild => isSameRoute(aChild, bChild));\n  });\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy(_ref4) {\n  let {\n    matches\n  } = _ref4;\n  let matchesToLoad = matches.filter(m => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map(m => m.resolve()));\n  return results.reduce((acc, result, i) => Object.assign(acc, {\n    [matchesToLoad[i].route.id]: result\n  }), {});\n}\nasync function callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties, requestContext) {\n  let loadRouteDefinitionsPromises = matches.map(m => m.route.lazy ? loadLazyRouteModule(m.route, mapRouteProperties, manifest) : undefined);\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some(m => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve = async handlerOverride => {\n      if (handlerOverride && request.method === \"GET\" && (match.route.lazy || match.route.loader)) {\n        shouldLoad = true;\n      }\n      return shouldLoad ? callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, requestContext) : Promise.resolve({\n        type: ResultType.data,\n        result: undefined\n      });\n    };\n    return _extends({}, match, {\n      shouldLoad,\n      resolve\n    });\n  });\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext\n  });\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n  return results;\n}\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, staticContext) {\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    let actualHandler = ctx => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(new Error(\"You cannot call the handler for a route which defines a boolean \" + (\"\\\"\" + type + \"\\\" [routeId: \" + match.route.id + \"]\")));\n      }\n      return handler({\n        request,\n        params: match.params,\n        context: staticContext\n      }, ...(ctx !== undefined ? [ctx] : []));\n    };\n    let handlerPromise = (async () => {\n      try {\n        let val = await (handlerOverride ? handlerOverride(ctx => actualHandler(ctx)) : actualHandler());\n        return {\n          type: \"data\",\n          result: val\n        };\n      } catch (e) {\n        return {\n          type: \"error\",\n          result: e\n        };\n      }\n    })();\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadRoutePromise]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            result: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result.result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return {\n      type: ResultType.error,\n      result: e\n    };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  return result;\n}\nasync function convertDataStrategyResultToDataResult(dataStrategyResult) {\n  let {\n    result,\n    type\n  } = dataStrategyResult;\n  if (isResponse(result)) {\n    let data;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      var _result$init3, _result$init4;\n      if (result.data instanceof Error) {\n        var _result$init, _result$init2;\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n          headers: (_result$init2 = result.init) != null && _result$init2.headers ? new Headers(result.init.headers) : undefined\n        };\n      }\n      // Convert thrown data() to ErrorResponse instances\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(((_result$init3 = result.init) == null ? void 0 : _result$init3.status) || 500, undefined, result.data),\n        statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n        headers: (_result$init4 = result.init) != null && _result$init4.headers ? new Headers(result.init.headers) : undefined\n      };\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init5, _result$init6;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init5 = result.init) == null ? void 0 : _result$init5.status,\n      headers: ((_result$init6 = result.init) == null ? void 0 : _result$init6.headers) && new Headers(result.init.headers)\n    };\n  }\n  if (isDataWithResponseInit(result)) {\n    var _result$init7, _result$init8;\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: (_result$init7 = result.init) == null ? void 0 : _result$init7.status,\n      headers: (_result$init8 = result.init) != null && _result$init8.headers ? new Headers(result.init.headers) : undefined\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {\n  let location = response.headers.get(\"Location\");\n  invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1);\n    location = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);\n    response.headers.set(\"Location\", location);\n  }\n  return response;\n}\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : undefined;\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach(match => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = {\n      [pendingActionResult[0]]: pendingError\n    };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, false // This method is only called client side so we always want to bubble\n  );\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach(rf => {\n    let {\n      key,\n      match,\n      controller\n    } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: {\n      [pendingActionResult[0]]: pendingActionResult[1].data\n    }\n  };\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type,\n    message\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return {\n        key,\n        result\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDataStrategyResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === ResultType.data || result.type === ResultType.error);\n}\nfunction isRedirectDataStrategyResultResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDataWithResponseInit(value) {\n  return typeof value === \"object\" && value != null && \"type\" in value && \"data\" in value && \"init\" in value && value.type === \"DataWithResponseInit\";\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveNavigationDeferredResults(matches, results, signal, currentMatches, currentLoaderData) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then(result => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\nasync function resolveFetcherDeferredResults(matches, results, revalidatingFetchers) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      routeId,\n      controller\n    } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(controller, \"Expected an AbortController for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, controller.signal, true).then(result => {\n        if (result) {\n          results[key] = result;\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, decodePath as UNSAFE_decodePath, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, data, defer, generatePath, getStaticContextFromError, getToPathname, isDataWithResponseInit, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, replace, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n","/**\n * React Router v6.30.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { UNSAFE_invariant, joinPaths, matchPath, UNSAFE_decodePath, UNSAFE_getResolveToMatches, UNSAFE_warning, resolveTo, parsePath, matchRoutes, Action, UNSAFE_convertRouteMatchToUiMatch, stripBasename, IDLE_BLOCKER, isRouteErrorResponse, createMemoryHistory, AbortedDeferredError, createRouter } from '@remix-run/router';\nexport { AbortedDeferredError, Action as NavigationType, createPath, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, replace, resolvePath } from '@remix-run/router';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nconst DataRouterContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  DataRouterContext.displayName = \"DataRouter\";\n}\nconst DataRouterStateContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\nconst AwaitContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  AwaitContext.displayName = \"Await\";\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level `<Router>` API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\n\nconst NavigationContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\nconst LocationContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\nconst RouteContext = /*#__PURE__*/React.createContext({\n  outlet: null,\n  matches: [],\n  isDataRoute: false\n});\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n}\nconst RouteErrorContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/v6/hooks/use-href\n */\nfunction useHref(to, _temp) {\n  let {\n    relative\n  } = _temp === void 0 ? {} : _temp;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    hash,\n    pathname,\n    search\n  } = useResolvedPath(to, {\n    relative\n  });\n  let joinedPathname = pathname;\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname = pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search,\n    hash\n  });\n}\n\n/**\n * Returns true if this component is a descendant of a `<Router>`.\n *\n * @see https://reactrouter.com/v6/hooks/use-in-router-context\n */\nfunction useInRouterContext() {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/v6/hooks/use-location\n */\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/v6/hooks/use-navigation-type\n */\nfunction useNavigationType() {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * `<NavLink>`.\n *\n * @see https://reactrouter.com/v6/hooks/use-match\n */\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    pathname\n  } = useLocation();\n  return React.useMemo(() => matchPath(pattern, UNSAFE_decodePath(pathname)), [pathname, pattern]);\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\nconst navigateEffectWarning = \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\";\n\n// Mute warnings for calls to useNavigate in SSR environments\nfunction useIsomorphicLayoutEffect(cb) {\n  let isStatic = React.useContext(NavigationContext).static;\n  if (!isStatic) {\n    // We should be able to get rid of this once react 18.3 is released\n    // See: https://github.com/facebook/react/pull/26395\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(cb);\n  }\n}\n\n/**\n * Returns an imperative method for changing the location. Used by `<Link>`s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/v6/hooks/use-navigate\n */\nfunction useNavigate() {\n  let {\n    isDataRoute\n  } = React.useContext(RouteContext);\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return isDataRoute ? useNavigateStable() : useNavigateUnstable();\n}\nfunction useNavigateUnstable() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let dataRouterContext = React.useContext(DataRouterContext);\n  let {\n    basename,\n    future,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, navigateEffectWarning) : void 0;\n\n    // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven't wired up our history listener yet\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === \"path\");\n\n    // If we're operating within a basename, prepend it to the pathname prior\n    // to handing off to history (but only if we're not in a data router,\n    // otherwise it'll prepend the basename inside of the router).\n    // If this is a root navigation, then we navigate to the raw basename\n    // which allows the basename to have full control over the presence of a\n    // trailing slash on root links\n    if (dataRouterContext == null && basename !== \"/\") {\n      path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n    }\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state, options);\n  }, [basename, navigator, routePathnamesJson, locationPathname, dataRouterContext]);\n  return navigate;\n}\nconst OutletContext = /*#__PURE__*/React.createContext(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/v6/hooks/use-outlet-context\n */\nfunction useOutletContext() {\n  return React.useContext(OutletContext);\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by `<Outlet>` to render child routes.\n *\n * @see https://reactrouter.com/v6/hooks/use-outlet\n */\nfunction useOutlet(context) {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return /*#__PURE__*/React.createElement(OutletContext.Provider, {\n      value: context\n    }, outlet);\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/v6/hooks/use-params\n */\nfunction useParams() {\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/v6/hooks/use-resolved-path\n */\nfunction useResolvedPath(to, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    future\n  } = React.useContext(NavigationContext);\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));\n  return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === \"path\"), [to, routePathnamesJson, locationPathname, relative]);\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an `<Outlet>` to render their child route's\n * element.\n *\n * @see https://reactrouter.com/v6/hooks/use-routes\n */\nfunction useRoutes(routes, locationArg) {\n  return useRoutesImpl(routes, locationArg);\n}\n\n// Internal implementation with accept optional param for RouterProvider usage\nfunction useRoutesImpl(routes, locationArg, dataRouterState, future) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    matches: parentMatches\n  } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + (parentPath === \"/\" ? \"*\" : parentPath + \"/*\") + \"\\\">.\"));\n  }\n  let locationFromContext = useLocation();\n  let location;\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : UNSAFE_invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n  let pathname = location.pathname || \"/\";\n  let remainingPathname = pathname;\n  if (parentPathnameBase !== \"/\") {\n    // Determine the remaining pathname by removing the # of URL segments the\n    // parentPathnameBase has, instead of removing based on character count.\n    // This is because we can't guarantee that incoming/outgoing encodings/\n    // decodings will match exactly.\n    // We decode paths before matching on a per-segment basis with\n    // decodeURIComponent(), but we re-encode pathnames via `new URL()` so they\n    // match what `window.location.pathname` would reflect.  Those don't 100%\n    // align when it comes to encoded URI characters such as % and &.\n    //\n    // So we may end up with:\n    //   pathname:           \"/descendant/a%25b/match\"\n    //   parentPathnameBase: \"/descendant/a%b\"\n    //\n    // And the direct substring removal approach won't work :/\n    let parentSegments = parentPathnameBase.replace(/^\\//, \"\").split(\"/\");\n    let segments = pathname.replace(/^\\//, \"\").split(\"/\");\n    remainingPathname = \"/\" + segments.slice(parentSegments.length).join(\"/\");\n  }\n  let matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(matches == null || matches[matches.length - 1].route.element !== undefined || matches[matches.length - 1].route.Component !== undefined || matches[matches.length - 1].route.lazy !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \" + \"does not have an element or Component. This means it will render an <Outlet /> with a \" + \"null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n  let renderedMatches = _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n    params: Object.assign({}, parentParams, match.params),\n    pathname: joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathname).pathname : match.pathname]),\n    pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathnameBase).pathname : match.pathnameBase])\n  })), parentMatches, dataRouterState, future);\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return /*#__PURE__*/React.createElement(LocationContext.Provider, {\n      value: {\n        location: _extends({\n          pathname: \"/\",\n          search: \"\",\n          hash: \"\",\n          state: null,\n          key: \"default\"\n        }, location),\n        navigationType: Action.Pop\n      }\n    }, renderedMatches);\n  }\n  return renderedMatches;\n}\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error) ? error.status + \" \" + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = {\n    padding: \"0.5rem\",\n    backgroundColor: lightgrey\n  };\n  let codeStyles = {\n    padding: \"2px 4px\",\n    backgroundColor: lightgrey\n  };\n  let devInfo = null;\n  if (process.env.NODE_ENV !== \"production\") {\n    console.error(\"Error handled by React Router default ErrorBoundary:\", error);\n    devInfo = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", null, \"\\uD83D\\uDCBF Hey developer \\uD83D\\uDC4B\"), /*#__PURE__*/React.createElement(\"p\", null, \"You can provide a way better UX than this when your app throws errors by providing your own \", /*#__PURE__*/React.createElement(\"code\", {\n      style: codeStyles\n    }, \"ErrorBoundary\"), \" or\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n      style: codeStyles\n    }, \"errorElement\"), \" prop on your route.\"));\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", null, \"Unexpected Application Error!\"), /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      fontStyle: \"italic\"\n    }\n  }, message), stack ? /*#__PURE__*/React.createElement(\"pre\", {\n    style: preStyles\n  }, stack) : null, devInfo);\n}\nconst defaultErrorElement = /*#__PURE__*/React.createElement(DefaultErrorComponent, null);\nclass RenderErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: props.location,\n      revalidation: props.revalidation,\n      error: props.error\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error: error\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location || state.revalidation !== \"idle\" && props.revalidation === \"idle\") {\n      return {\n        error: props.error,\n        location: props.location,\n        revalidation: props.revalidation\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error !== undefined ? props.error : state.error,\n      location: state.location,\n      revalidation: props.revalidation || state.revalidation\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\"React Router caught the following error during render\", error, errorInfo);\n  }\n  render() {\n    return this.state.error !== undefined ? /*#__PURE__*/React.createElement(RouteContext.Provider, {\n      value: this.props.routeContext\n    }, /*#__PURE__*/React.createElement(RouteErrorContext.Provider, {\n      value: this.state.error,\n      children: this.props.component\n    })) : this.props.children;\n  }\n}\nfunction RenderedRoute(_ref) {\n  let {\n    routeContext,\n    match,\n    children\n  } = _ref;\n  let dataRouterContext = React.useContext(DataRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n  return /*#__PURE__*/React.createElement(RouteContext.Provider, {\n    value: routeContext\n  }, children);\n}\nfunction _renderMatches(matches, parentMatches, dataRouterState, future) {\n  var _dataRouterState;\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n  if (dataRouterState === void 0) {\n    dataRouterState = null;\n  }\n  if (future === void 0) {\n    future = null;\n  }\n  if (matches == null) {\n    var _future;\n    if (!dataRouterState) {\n      return null;\n    }\n    if (dataRouterState.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches;\n    } else if ((_future = future) != null && _future.v7_partialHydration && parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {\n      // Don't bail if we're initializing with partial hydration and we have\n      // router matches.  That means we're actively running `patchRoutesOnNavigation`\n      // so we should render down the partial matches to the appropriate\n      // `HydrateFallback`.  We only do this if `parentMatches` is empty so it\n      // only impacts the root matches for `RouterProvider` and no descendant\n      // `<Routes>`\n      matches = dataRouterState.matches;\n    } else {\n      return null;\n    }\n  }\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = (_dataRouterState = dataRouterState) == null ? void 0 : _dataRouterState.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(m => m.route.id && (errors == null ? void 0 : errors[m.route.id]) !== undefined);\n    !(errorIndex >= 0) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"Could not find a matching route for errors on route IDs: \" + Object.keys(errors).join(\",\")) : UNSAFE_invariant(false) : void 0;\n    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));\n  }\n\n  // If we're in a partial hydration mode, detect if we need to render down to\n  // a given HydrateFallback while we load the rest of the hydration data\n  let renderFallback = false;\n  let fallbackIndex = -1;\n  if (dataRouterState && future && future.v7_partialHydration) {\n    for (let i = 0; i < renderedMatches.length; i++) {\n      let match = renderedMatches[i];\n      // Track the deepest fallback up until the first route without data\n      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {\n        fallbackIndex = i;\n      }\n      if (match.route.id) {\n        let {\n          loaderData,\n          errors\n        } = dataRouterState;\n        let needsToRunLoader = match.route.loader && loaderData[match.route.id] === undefined && (!errors || errors[match.route.id] === undefined);\n        if (match.route.lazy || needsToRunLoader) {\n          // We found the first route that's not ready to render (waiting on\n          // lazy, or has a loader that hasn't run yet).  Flag that we need to\n          // render a fallback and render up until the appropriate fallback\n          renderFallback = true;\n          if (fallbackIndex >= 0) {\n            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);\n          } else {\n            renderedMatches = [renderedMatches[0]];\n          }\n          break;\n        }\n      }\n    }\n  }\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    // Only data routers handle errors/fallbacks\n    let error;\n    let shouldRenderHydrateFallback = false;\n    let errorElement = null;\n    let hydrateFallbackElement = null;\n    if (dataRouterState) {\n      error = errors && match.route.id ? errors[match.route.id] : undefined;\n      errorElement = match.route.errorElement || defaultErrorElement;\n      if (renderFallback) {\n        if (fallbackIndex < 0 && index === 0) {\n          warningOnce(\"route-fallback\", false, \"No `HydrateFallback` element provided to render during initial hydration\");\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = null;\n        } else if (fallbackIndex === index) {\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = match.route.hydrateFallbackElement || null;\n        }\n      }\n    }\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => {\n      let children;\n      if (error) {\n        children = errorElement;\n      } else if (shouldRenderHydrateFallback) {\n        children = hydrateFallbackElement;\n      } else if (match.route.Component) {\n        // Note: This is a de-optimized path since React won't re-use the\n        // ReactElement since it's identity changes with each new\n        // React.createElement call.  We keep this so folks can use\n        // `<Route Component={...}>` in `<Routes>` but generally `Component`\n        // usage is only advised in `RouterProvider` when we can convert it to\n        // `element` ahead of time.\n        children = /*#__PURE__*/React.createElement(match.route.Component, null);\n      } else if (match.route.element) {\n        children = match.route.element;\n      } else {\n        children = outlet;\n      }\n      return /*#__PURE__*/React.createElement(RenderedRoute, {\n        match: match,\n        routeContext: {\n          outlet,\n          matches,\n          isDataRoute: dataRouterState != null\n        },\n        children: children\n      });\n    };\n    // Only wrap in an error boundary within data router usages when we have an\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n    // an ancestor ErrorBoundary/errorElement\n    return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /*#__PURE__*/React.createElement(RenderErrorBoundary, {\n      location: dataRouterState.location,\n      revalidation: dataRouterState.revalidation,\n      component: errorElement,\n      error: error,\n      children: getChildren(),\n      routeContext: {\n        outlet: null,\n        matches,\n        isDataRoute: true\n      }\n    }) : getChildren();\n  }, null);\n}\nvar DataRouterHook = /*#__PURE__*/function (DataRouterHook) {\n  DataRouterHook[\"UseBlocker\"] = \"useBlocker\";\n  DataRouterHook[\"UseRevalidator\"] = \"useRevalidator\";\n  DataRouterHook[\"UseNavigateStable\"] = \"useNavigate\";\n  return DataRouterHook;\n}(DataRouterHook || {});\nvar DataRouterStateHook = /*#__PURE__*/function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseBlocker\"] = \"useBlocker\";\n  DataRouterStateHook[\"UseLoaderData\"] = \"useLoaderData\";\n  DataRouterStateHook[\"UseActionData\"] = \"useActionData\";\n  DataRouterStateHook[\"UseRouteError\"] = \"useRouteError\";\n  DataRouterStateHook[\"UseNavigation\"] = \"useNavigation\";\n  DataRouterStateHook[\"UseRouteLoaderData\"] = \"useRouteLoaderData\";\n  DataRouterStateHook[\"UseMatches\"] = \"useMatches\";\n  DataRouterStateHook[\"UseRevalidator\"] = \"useRevalidator\";\n  DataRouterStateHook[\"UseNavigateStable\"] = \"useNavigate\";\n  DataRouterStateHook[\"UseRouteId\"] = \"useRouteId\";\n  return DataRouterStateHook;\n}(DataRouterStateHook || {});\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\nfunction useRouteContext(hookName) {\n  let route = React.useContext(RouteContext);\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return route;\n}\n\n// Internal version with hookName-aware debugging\nfunction useCurrentRouteId(hookName) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  !thisRoute.route.id ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, hookName + \" can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the ID for the nearest contextual route\n */\nfunction useRouteId() {\n  return useCurrentRouteId(DataRouterStateHook.UseRouteId);\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nfunction useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nfunction useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return React.useMemo(() => ({\n    revalidate: dataRouterContext.router.revalidate,\n    state: state.revalidation\n  }), [dataRouterContext.router.revalidate, state.revalidation]);\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nfunction useMatches() {\n  let {\n    matches,\n    loaderData\n  } = useDataRouterState(DataRouterStateHook.UseMatches);\n  return React.useMemo(() => matches.map(m => UNSAFE_convertRouteMatchToUiMatch(m, loaderData)), [matches, loaderData]);\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nfunction useLoaderData() {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\"You cannot `useLoaderData` in an errorElement (routeId: \" + routeId + \")\");\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nfunction useRouteLoaderData(routeId) {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nfunction useActionData() {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  return state.actionData ? state.actionData[routeId] : undefined;\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * ErrorBoundary/errorElement to display a proper error message.\n */\nfunction useRouteError() {\n  var _state$errors;\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error !== undefined) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor `<Await />` value\n */\nfunction useAsyncValue() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._data;\n}\n\n/**\n * Returns the error from the nearest ancestor `<Await />` value\n */\nfunction useAsyncError() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._error;\n}\nlet blockerId = 0;\n\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\nfunction useBlocker(shouldBlock) {\n  let {\n    router,\n    basename\n  } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n  let [blockerKey, setBlockerKey] = React.useState(\"\");\n  let blockerFunction = React.useCallback(arg => {\n    if (typeof shouldBlock !== \"function\") {\n      return !!shouldBlock;\n    }\n    if (basename === \"/\") {\n      return shouldBlock(arg);\n    }\n\n    // If they provided us a function and we've got an active basename, strip\n    // it from the locations we expose to the user to match the behavior of\n    // useLocation\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = arg;\n    return shouldBlock({\n      currentLocation: _extends({}, currentLocation, {\n        pathname: stripBasename(currentLocation.pathname, basename) || currentLocation.pathname\n      }),\n      nextLocation: _extends({}, nextLocation, {\n        pathname: stripBasename(nextLocation.pathname, basename) || nextLocation.pathname\n      }),\n      historyAction\n    });\n  }, [basename, shouldBlock]);\n\n  // This effect is in charge of blocker key assignment and deletion (which is\n  // tightly coupled to the key)\n  React.useEffect(() => {\n    let key = String(++blockerId);\n    setBlockerKey(key);\n    return () => router.deleteBlocker(key);\n  }, [router]);\n\n  // This effect handles assigning the blockerFunction.  This is to handle\n  // unstable blocker function identities, and happens only after the prior\n  // effect so we don't get an orphaned blockerFunction in the router with a\n  // key of \"\".  Until then we just have the IDLE_BLOCKER.\n  React.useEffect(() => {\n    if (blockerKey !== \"\") {\n      router.getBlocker(blockerKey, blockerFunction);\n    }\n  }, [router, blockerKey, blockerFunction]);\n\n  // Prefer the blocker from `state` not `router.state` since DataRouterContext\n  // is memoized so this ensures we update on blocker state updates\n  return blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : IDLE_BLOCKER;\n}\n\n/**\n * Stable version of useNavigate that is used when we are in the context of\n * a RouterProvider.\n */\nfunction useNavigateStable() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseNavigateStable);\n  let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, navigateEffectWarning) : void 0;\n\n    // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven't wired up our router subscriber yet\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      router.navigate(to);\n    } else {\n      router.navigate(to, _extends({\n        fromRouteId: id\n      }, options));\n    }\n  }, [router, id]);\n  return navigate;\n}\nconst alreadyWarned$1 = {};\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned$1[key]) {\n    alreadyWarned$1[key] = true;\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, message) : void 0;\n  }\n}\n\nconst alreadyWarned = {};\nfunction warnOnce(key, message) {\n  if (process.env.NODE_ENV !== \"production\" && !alreadyWarned[message]) {\n    alreadyWarned[message] = true;\n    console.warn(message);\n  }\n}\nconst logDeprecation = (flag, msg, link) => warnOnce(flag, \"\\u26A0\\uFE0F React Router Future Flag Warning: \" + msg + \". \" + (\"You can use the `\" + flag + \"` future flag to opt-in early. \") + (\"For more information, see \" + link + \".\"));\nfunction logV6DeprecationWarnings(renderFuture, routerFuture) {\n  if ((renderFuture == null ? void 0 : renderFuture.v7_startTransition) === undefined) {\n    logDeprecation(\"v7_startTransition\", \"React Router will begin wrapping state updates in `React.startTransition` in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_starttransition\");\n  }\n  if ((renderFuture == null ? void 0 : renderFuture.v7_relativeSplatPath) === undefined && (!routerFuture || routerFuture.v7_relativeSplatPath === undefined)) {\n    logDeprecation(\"v7_relativeSplatPath\", \"Relative route resolution within Splat routes is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath\");\n  }\n  if (routerFuture) {\n    if (routerFuture.v7_fetcherPersist === undefined) {\n      logDeprecation(\"v7_fetcherPersist\", \"The persistence behavior of fetchers is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_fetcherpersist\");\n    }\n    if (routerFuture.v7_normalizeFormMethod === undefined) {\n      logDeprecation(\"v7_normalizeFormMethod\", \"Casing of `formMethod` fields is being normalized to uppercase in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_normalizeformmethod\");\n    }\n    if (routerFuture.v7_partialHydration === undefined) {\n      logDeprecation(\"v7_partialHydration\", \"`RouterProvider` hydration behavior is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_partialhydration\");\n    }\n    if (routerFuture.v7_skipActionErrorRevalidation === undefined) {\n      logDeprecation(\"v7_skipActionErrorRevalidation\", \"The revalidation behavior after 4xx/5xx `action` responses is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_skipactionerrorrevalidation\");\n    }\n  }\n}\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  let [state, setStateImpl] = React.useState(router.state);\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    if (v7_startTransition && startTransitionImpl) {\n      startTransitionImpl(() => setStateImpl(newState));\n    } else {\n      setStateImpl(newState);\n    }\n  }, [setStateImpl, v7_startTransition]);\n\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  React.useEffect(() => {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(fallbackElement == null || !router.future.v7_partialHydration, \"`<RouterProvider fallbackElement>` is deprecated when using \" + \"`v7_partialHydration`, use a `HydrateFallback` component instead\") : void 0;\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n  React.useEffect(() => logV6DeprecationWarnings(future, router.future), [router, future]);\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator,\n    future: {\n      v7_relativeSplatPath: router.future.v7_relativeSplatPath\n    }\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(DataRoutes, {\n    routes: router.routes,\n    future: router.future,\n    state: state\n  }) : fallbackElement))), null);\n}\nfunction DataRoutes(_ref2) {\n  let {\n    routes,\n    future,\n    state\n  } = _ref2;\n  return useRoutesImpl(routes, undefined, state, future);\n}\n/**\n * A `<Router>` that stores all entries in memory.\n *\n * @see https://reactrouter.com/v6/router-components/memory-router\n */\nfunction MemoryRouter(_ref3) {\n  let {\n    basename,\n    children,\n    initialEntries,\n    initialIndex,\n    future\n  } = _ref3;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/v6/components/navigate\n */\nfunction Navigate(_ref4) {\n  let {\n    to,\n    replace,\n    state,\n    relative\n  } = _ref4;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    future,\n    static: isStatic\n  } = React.useContext(NavigationContext);\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(!isStatic, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let navigate = useNavigate();\n\n  // Resolve the path outside of the effect so that when effects run twice in\n  // StrictMode they navigate to the same place\n  let path = resolveTo(to, UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath), locationPathname, relative === \"path\");\n  let jsonPath = JSON.stringify(path);\n  React.useEffect(() => navigate(JSON.parse(jsonPath), {\n    replace,\n    state,\n    relative\n  }), [navigate, jsonPath, relative, replace, state]);\n  return null;\n}\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/v6/components/outlet\n */\nfunction Outlet(props) {\n  return useOutlet(props.context);\n}\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/v6/components/route\n */\nfunction Route(_props) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : UNSAFE_invariant(false) ;\n}\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a `<Router>` directly. Instead, you'll render a\n * router that is more specific to your environment such as a `<BrowserRouter>`\n * in web browsers or a `<StaticRouter>` for server rendering.\n *\n * @see https://reactrouter.com/v6/router-components/router\n */\nfunction Router(_ref5) {\n  let {\n    basename: basenameProp = \"/\",\n    children = null,\n    location: locationProp,\n    navigationType = Action.Pop,\n    navigator,\n    static: staticProp = false,\n    future\n  } = _ref5;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : UNSAFE_invariant(false) : void 0;\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(() => ({\n    basename,\n    navigator,\n    static: staticProp,\n    future: _extends({\n      v7_relativeSplatPath: false\n    }, future)\n  }), [basename, future, navigator, staticProp]);\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n  let locationContext = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n    if (trailingPathname == null) {\n      return null;\n    }\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key\n      },\n      navigationType\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(locationContext != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n  if (locationContext == null) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/React.createElement(LocationContext.Provider, {\n    children: children,\n    value: locationContext\n  }));\n}\n/**\n * A container for a nested tree of `<Route>` elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/v6/components/routes\n */\nfunction Routes(_ref6) {\n  let {\n    children,\n    location\n  } = _ref6;\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nfunction Await(_ref7) {\n  let {\n    children,\n    errorElement,\n    resolve\n  } = _ref7;\n  return /*#__PURE__*/React.createElement(AwaitErrorBoundary, {\n    resolve: resolve,\n    errorElement: errorElement\n  }, /*#__PURE__*/React.createElement(ResolveAwait, null, children));\n}\nvar AwaitRenderStatus = /*#__PURE__*/function (AwaitRenderStatus) {\n  AwaitRenderStatus[AwaitRenderStatus[\"pending\"] = 0] = \"pending\";\n  AwaitRenderStatus[AwaitRenderStatus[\"success\"] = 1] = \"success\";\n  AwaitRenderStatus[AwaitRenderStatus[\"error\"] = 2] = \"error\";\n  return AwaitRenderStatus;\n}(AwaitRenderStatus || {});\nconst neverSettledPromise = new Promise(() => {});\nclass AwaitErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\"<Await> caught the following error during render\", error, errorInfo);\n  }\n  render() {\n    let {\n      children,\n      errorElement,\n      resolve\n    } = this.props;\n    let promise = null;\n    let status = AwaitRenderStatus.pending;\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", {\n        get: () => true\n      });\n      Object.defineProperty(promise, \"_data\", {\n        get: () => resolve\n      });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", {\n        get: () => true\n      });\n      Object.defineProperty(promise, \"_error\", {\n        get: () => renderError\n      });\n    } else if (resolve._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status = \"_error\" in promise ? AwaitRenderStatus.error : \"_data\" in promise ? AwaitRenderStatus.success : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", {\n        get: () => true\n      });\n      promise = resolve.then(data => Object.defineProperty(resolve, \"_data\", {\n        get: () => data\n      }), error => Object.defineProperty(resolve, \"_error\", {\n        get: () => error\n      }));\n    }\n    if (status === AwaitRenderStatus.error && promise._error instanceof AbortedDeferredError) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: errorElement\n      });\n    }\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: children\n      });\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on `<Await>`\n */\nfunction ResolveAwait(_ref8) {\n  let {\n    children\n  } = _ref8;\n  let data = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data) : children;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, toRender);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/v6/utils/create-routes-from-children\n */\nfunction createRoutesFromChildren(children, parentPath) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  let routes = [];\n  React.Children.forEach(children, (element, index) => {\n    if (! /*#__PURE__*/React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n    let treePath = [...parentPath, index];\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));\n      return;\n    }\n    !(element.type === Route) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\") : UNSAFE_invariant(false) : void 0;\n    !(!element.props.index || !element.props.children) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"An index route cannot have child routes.\") : UNSAFE_invariant(false) : void 0;\n    let route = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy\n    };\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children, treePath);\n    }\n    routes.push(route);\n  });\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\n\nfunction mapRouteProperties(route) {\n  let updates = {\n    // Note: this check also occurs in createRoutesFromChildren so update\n    // there if you change this -- please and thank you!\n    hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null\n  };\n  if (route.Component) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.element) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `Component` and `element` on your route - \" + \"`Component` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      element: /*#__PURE__*/React.createElement(route.Component),\n      Component: undefined\n    });\n  }\n  if (route.HydrateFallback) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.hydrateFallbackElement) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - \" + \"`HydrateFallback` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      hydrateFallbackElement: /*#__PURE__*/React.createElement(route.HydrateFallback),\n      HydrateFallback: undefined\n    });\n  }\n  if (route.ErrorBoundary) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.errorElement) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `ErrorBoundary` and `errorElement` on your route - \" + \"`ErrorBoundary` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      errorElement: /*#__PURE__*/React.createElement(route.ErrorBoundary),\n      ErrorBoundary: undefined\n    });\n  }\n  return updates;\n}\nfunction createMemoryRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createMemoryHistory({\n      initialEntries: opts == null ? void 0 : opts.initialEntries,\n      initialIndex: opts == null ? void 0 : opts.initialIndex\n    }),\n    hydrationData: opts == null ? void 0 : opts.hydrationData,\n    routes,\n    mapRouteProperties,\n    dataStrategy: opts == null ? void 0 : opts.dataStrategy,\n    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation\n  }).initialize();\n}\n\nexport { Await, MemoryRouter, Navigate, Outlet, Route, Router, RouterProvider, Routes, DataRouterContext as UNSAFE_DataRouterContext, DataRouterStateContext as UNSAFE_DataRouterStateContext, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, logV6DeprecationWarnings as UNSAFE_logV6DeprecationWarnings, mapRouteProperties as UNSAFE_mapRouteProperties, useRouteId as UNSAFE_useRouteId, useRoutesImpl as UNSAFE_useRoutesImpl, createMemoryRouter, createRoutesFromChildren, createRoutesFromChildren as createRoutesFromElements, renderMatches, useActionData, useAsyncError, useAsyncValue, useBlocker, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes };\n//# sourceMappingURL=index.js.map\n","/**\n * React Router DOM v6.30.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { UNSAFE_mapRouteProperties, UNSAFE_logV6DeprecationWarnings, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, Router, UNSAFE_useRoutesImpl, UNSAFE_NavigationContext, useHref, useResolvedPath, useLocation, useNavigate, createPath, UNSAFE_useRouteId, UNSAFE_RouteContext, useMatches, useNavigation, useBlocker } from 'react-router';\nexport { AbortedDeferredError, Await, MemoryRouter, Navigate, NavigationType, Outlet, Route, Router, Routes, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, UNSAFE_useRouteId, createMemoryRouter, createPath, createRoutesFromChildren, createRoutesFromElements, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, renderMatches, replace, resolvePath, useActionData, useAsyncError, useAsyncValue, useBlocker, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes } from 'react-router';\nimport { stripBasename, UNSAFE_warning, createRouter, createBrowserHistory, createHashHistory, UNSAFE_ErrorResponseImpl, UNSAFE_invariant, joinPaths, IDLE_FETCHER, matchPath } from '@remix-run/router';\nexport { UNSAFE_ErrorResponseImpl } from '@remix-run/router';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nconst defaultMethod = \"get\";\nconst defaultEncType = \"application/x-www-form-urlencoded\";\nfunction isHtmlElement(object) {\n  return object != null && typeof object.tagName === \"string\";\n}\nfunction isButtonElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\nfunction isFormElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\nfunction isInputElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nfunction shouldProcessLinkClick(event, target) {\n  return event.button === 0 && (\n  // Ignore everything but left clicks\n  !target || target === \"_self\") &&\n  // Let browser handle \"target=_blank\" etc.\n  !isModifiedEvent(event) // Ignore clicks with modifier keys\n  ;\n}\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nfunction createSearchParams(init) {\n  if (init === void 0) {\n    init = \"\";\n  }\n  return new URLSearchParams(typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {\n    let value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]);\n  }, []));\n}\nfunction getSearchParamsForLocation(locationSearch, defaultSearchParams) {\n  let searchParams = createSearchParams(locationSearch);\n  if (defaultSearchParams) {\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\n    // web extensions. Relevant Bugzilla tickets:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach(value => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n  return searchParams;\n}\n// One-time check for submitter support\nlet _formDataSupportsSubmitter = null;\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(document.createElement(\"form\"),\n      // @ts-expect-error if FormData supports the submitter parameter, this will throw\n      0);\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\nconst supportedFormEncTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\nfunction getFormEncType(encType) {\n  if (encType != null && !supportedFormEncTypes.has(encType)) {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"\\\"\" + encType + \"\\\" is not a valid `encType` for `<Form>`/`<fetcher.Form>` \" + (\"and will default to \\\"\" + defaultEncType + \"\\\"\")) : void 0;\n    return null;\n  }\n  return encType;\n}\nfunction getFormSubmissionInfo(target, basename) {\n  let method;\n  let action;\n  let encType;\n  let formData;\n  let body;\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n    formData = new FormData(target);\n  } else if (isButtonElement(target) || isInputElement(target) && (target.type === \"submit\" || target.type === \"image\")) {\n    let form = target.form;\n    if (form == null) {\n      throw new Error(\"Cannot submit a <button> or <input type=\\\"submit\\\"> without a <form>\");\n    }\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"formmethod\") || form.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"formenctype\")) || getFormEncType(form.getAttribute(\"enctype\")) || defaultEncType;\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let {\n        name,\n        type,\n        value\n      } = target;\n      if (type === \"image\") {\n        let prefix = name ? name + \".\" : \"\";\n        formData.append(prefix + \"x\", \"0\");\n        formData.append(prefix + \"y\", \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\"Cannot submit element that is not <form>, <button>, or \" + \"<input type=\\\"submit|image\\\">\");\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n  return {\n    action,\n    method: method.toLowerCase(),\n    encType,\n    formData,\n    body\n  };\n}\n\nconst _excluded = [\"onClick\", \"relative\", \"reloadDocument\", \"replace\", \"state\", \"target\", \"to\", \"preventScrollReset\", \"viewTransition\"],\n  _excluded2 = [\"aria-current\", \"caseSensitive\", \"className\", \"end\", \"style\", \"to\", \"viewTransition\", \"children\"],\n  _excluded3 = [\"fetcherKey\", \"navigate\", \"reloadDocument\", \"replace\", \"state\", \"method\", \"action\", \"onSubmit\", \"relative\", \"preventScrollReset\", \"viewTransition\"];\n// HEY YOU! DON'T TOUCH THIS VARIABLE!\n//\n// It is replaced with the proper version at build time via a babel plugin in\n// the rollup config.\n//\n// Export a global property onto the window for React Router detection by the\n// Core Web Vitals Technology Report.  This way they can configure the `wappalyzer`\n// to detect and properly classify live websites as being built with React Router:\n// https://github.com/HTTPArchive/wappalyzer/blob/main/src/technologies/r.json\nconst REACT_ROUTER_VERSION = \"6\";\ntry {\n  window.__reactRouterVersion = REACT_ROUTER_VERSION;\n} catch (e) {\n  // no-op\n}\nfunction createBrowserRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createBrowserHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    dataStrategy: opts == null ? void 0 : opts.dataStrategy,\n    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction createHashRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createHashHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    dataStrategy: opts == null ? void 0 : opts.dataStrategy,\n    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction parseHydrationData() {\n  var _window;\n  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = _extends({}, state, {\n      errors: deserializeErrors(state.errors)\n    });\n  }\n  return state;\n}\nfunction deserializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new UNSAFE_ErrorResponseImpl(val.status, val.statusText, val.data, val.internal === true);\n    } else if (val && val.__type === \"Error\") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don't serialize SSR stack traces for security reasons\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don't serialize SSR stack traces for security reasons\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\nconst ViewTransitionContext = /*#__PURE__*/React.createContext({\n  isTransitioning: false\n});\nif (process.env.NODE_ENV !== \"production\") {\n  ViewTransitionContext.displayName = \"ViewTransition\";\n}\nconst FetchersContext = /*#__PURE__*/React.createContext(new Map());\nif (process.env.NODE_ENV !== \"production\") {\n  FetchersContext.displayName = \"Fetchers\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\nconst FLUSH_SYNC = \"flushSync\";\nconst flushSyncImpl = ReactDOM[FLUSH_SYNC];\nconst USE_ID = \"useId\";\nconst useIdImpl = React[USE_ID];\nfunction startTransitionSafe(cb) {\n  if (startTransitionImpl) {\n    startTransitionImpl(cb);\n  } else {\n    cb();\n  }\n}\nfunction flushSyncSafe(cb) {\n  if (flushSyncImpl) {\n    flushSyncImpl(cb);\n  } else {\n    cb();\n  }\n}\nclass Deferred {\n  constructor() {\n    this.status = \"pending\";\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = value => {\n        if (this.status === \"pending\") {\n          this.status = \"resolved\";\n          resolve(value);\n        }\n      };\n      this.reject = reason => {\n        if (this.status === \"pending\") {\n          this.status = \"rejected\";\n          reject(reason);\n        }\n      };\n    });\n  }\n}\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  let [state, setStateImpl] = React.useState(router.state);\n  let [pendingState, setPendingState] = React.useState();\n  let [vtContext, setVtContext] = React.useState({\n    isTransitioning: false\n  });\n  let [renderDfd, setRenderDfd] = React.useState();\n  let [transition, setTransition] = React.useState();\n  let [interruption, setInterruption] = React.useState();\n  let fetcherData = React.useRef(new Map());\n  let {\n    v7_startTransition\n  } = future || {};\n  let optInStartTransition = React.useCallback(cb => {\n    if (v7_startTransition) {\n      startTransitionSafe(cb);\n    } else {\n      cb();\n    }\n  }, [v7_startTransition]);\n  let setState = React.useCallback((newState, _ref2) => {\n    let {\n      deletedFetchers,\n      flushSync: flushSync,\n      viewTransitionOpts: viewTransitionOpts\n    } = _ref2;\n    newState.fetchers.forEach((fetcher, key) => {\n      if (fetcher.data !== undefined) {\n        fetcherData.current.set(key, fetcher.data);\n      }\n    });\n    deletedFetchers.forEach(key => fetcherData.current.delete(key));\n    let isViewTransitionUnavailable = router.window == null || router.window.document == null || typeof router.window.document.startViewTransition !== \"function\";\n    // If this isn't a view transition or it's not available in this browser,\n    // just update and be done with it\n    if (!viewTransitionOpts || isViewTransitionUnavailable) {\n      if (flushSync) {\n        flushSyncSafe(() => setStateImpl(newState));\n      } else {\n        optInStartTransition(() => setStateImpl(newState));\n      }\n      return;\n    }\n    // flushSync + startViewTransition\n    if (flushSync) {\n      // Flush through the context to mark DOM elements as transition=ing\n      flushSyncSafe(() => {\n        // Cancel any pending transitions\n        if (transition) {\n          renderDfd && renderDfd.resolve();\n          transition.skipTransition();\n        }\n        setVtContext({\n          isTransitioning: true,\n          flushSync: true,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation\n        });\n      });\n      // Update the DOM\n      let t = router.window.document.startViewTransition(() => {\n        flushSyncSafe(() => setStateImpl(newState));\n      });\n      // Clean up after the animation completes\n      t.finished.finally(() => {\n        flushSyncSafe(() => {\n          setRenderDfd(undefined);\n          setTransition(undefined);\n          setPendingState(undefined);\n          setVtContext({\n            isTransitioning: false\n          });\n        });\n      });\n      flushSyncSafe(() => setTransition(t));\n      return;\n    }\n    // startTransition + startViewTransition\n    if (transition) {\n      // Interrupting an in-progress transition, cancel and let everything flush\n      // out, and then kick off a new transition from the interruption state\n      renderDfd && renderDfd.resolve();\n      transition.skipTransition();\n      setInterruption({\n        state: newState,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    } else {\n      // Completed navigation update with opted-in view transitions, let 'er rip\n      setPendingState(newState);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    }\n  }, [router.window, transition, renderDfd, fetcherData, optInStartTransition]);\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  // When we start a view transition, create a Deferred we can use for the\n  // eventual \"completed\" render\n  React.useEffect(() => {\n    if (vtContext.isTransitioning && !vtContext.flushSync) {\n      setRenderDfd(new Deferred());\n    }\n  }, [vtContext]);\n  // Once the deferred is created, kick off startViewTransition() to update the\n  // DOM and then wait on the Deferred to resolve (indicating the DOM update has\n  // happened)\n  React.useEffect(() => {\n    if (renderDfd && pendingState && router.window) {\n      let newState = pendingState;\n      let renderPromise = renderDfd.promise;\n      let transition = router.window.document.startViewTransition(async () => {\n        optInStartTransition(() => setStateImpl(newState));\n        await renderPromise;\n      });\n      transition.finished.finally(() => {\n        setRenderDfd(undefined);\n        setTransition(undefined);\n        setPendingState(undefined);\n        setVtContext({\n          isTransitioning: false\n        });\n      });\n      setTransition(transition);\n    }\n  }, [optInStartTransition, pendingState, renderDfd, router.window]);\n  // When the new location finally renders and is committed to the DOM, this\n  // effect will run to resolve the transition\n  React.useEffect(() => {\n    if (renderDfd && pendingState && state.location.key === pendingState.location.key) {\n      renderDfd.resolve();\n    }\n  }, [renderDfd, transition, state.location, pendingState]);\n  // If we get interrupted with a new navigation during a transition, we skip\n  // the active transition, let it cleanup, then kick it off again here\n  React.useEffect(() => {\n    if (!vtContext.isTransitioning && interruption) {\n      setPendingState(interruption.state);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: interruption.currentLocation,\n        nextLocation: interruption.nextLocation\n      });\n      setInterruption(undefined);\n    }\n  }, [vtContext.isTransitioning, interruption]);\n  React.useEffect(() => {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(fallbackElement == null || !router.future.v7_partialHydration, \"`<RouterProvider fallbackElement>` is deprecated when using \" + \"`v7_partialHydration`, use a `HydrateFallback` component instead\") : void 0;\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n  let routerFuture = React.useMemo(() => ({\n    v7_relativeSplatPath: router.future.v7_relativeSplatPath\n  }), [router.future.v7_relativeSplatPath]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future, router.future), [future, router.future]);\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UNSAFE_DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(UNSAFE_DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(FetchersContext.Provider, {\n    value: fetcherData.current\n  }, /*#__PURE__*/React.createElement(ViewTransitionContext.Provider, {\n    value: vtContext\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator,\n    future: routerFuture\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(MemoizedDataRoutes, {\n    routes: router.routes,\n    future: router.future,\n    state: state\n  }) : fallbackElement))))), null);\n}\n// Memoize to avoid re-renders when updating `ViewTransitionContext`\nconst MemoizedDataRoutes = /*#__PURE__*/React.memo(DataRoutes);\nfunction DataRoutes(_ref3) {\n  let {\n    routes,\n    future,\n    state\n  } = _ref3;\n  return UNSAFE_useRoutesImpl(routes, undefined, state, future);\n}\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nfunction BrowserRouter(_ref4) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref4;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nfunction HashRouter(_ref5) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref5;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter(_ref6) {\n  let {\n    basename,\n    children,\n    future,\n    history\n  } = _ref6;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\nif (process.env.NODE_ENV !== \"production\") {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n/**\n * The public API for rendering a history-aware `<a>`.\n */\nconst Link = /*#__PURE__*/React.forwardRef(function LinkWithRef(_ref7, ref) {\n  let {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      viewTransition\n    } = _ref7,\n    rest = _objectWithoutPropertiesLoose(_ref7, _excluded);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  // Rendered into <a href> for absolute URLs\n  let absoluteHref;\n  let isExternal = false;\n  if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n    // Render the absolute href server- and client-side\n    absoluteHref = to;\n    // Only check for external origins client-side\n    if (isBrowser) {\n      try {\n        let currentUrl = new URL(window.location.href);\n        let targetUrl = to.startsWith(\"//\") ? new URL(currentUrl.protocol + to) : new URL(to);\n        let path = stripBasename(targetUrl.pathname, basename);\n        if (targetUrl.origin === currentUrl.origin && path != null) {\n          // Strip the protocol/origin/basename for same-origin absolute URLs\n          to = path + targetUrl.search + targetUrl.hash;\n        } else {\n          isExternal = true;\n        }\n      } catch (e) {\n        // We can't do external URL detection without a valid URL\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"<Link to=\\\"\" + to + \"\\\"> contains an invalid URL which will probably break \" + \"when clicked - please update to a valid URL path.\") : void 0;\n      }\n    }\n  }\n  // Rendered into <a href> for relative URLs\n  let href = useHref(to, {\n    relative\n  });\n  let internalOnClick = useLinkClickHandler(to, {\n    replace,\n    state,\n    target,\n    preventScrollReset,\n    relative,\n    viewTransition\n  });\n  function handleClick(event) {\n    if (onClick) onClick(event);\n    if (!event.defaultPrevented) {\n      internalOnClick(event);\n    }\n  }\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\n    React.createElement(\"a\", _extends({}, rest, {\n      href: absoluteHref || href,\n      onClick: isExternal || reloadDocument ? onClick : handleClick,\n      ref: ref,\n      target: target\n    }))\n  );\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Link.displayName = \"Link\";\n}\n/**\n * A `<Link>` wrapper that knows if it's \"active\" or not.\n */\nconst NavLink = /*#__PURE__*/React.forwardRef(function NavLinkWithRef(_ref8, ref) {\n  let {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      viewTransition,\n      children\n    } = _ref8,\n    rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);\n  let path = useResolvedPath(to, {\n    relative: rest.relative\n  });\n  let location = useLocation();\n  let routerState = React.useContext(UNSAFE_DataRouterStateContext);\n  let {\n    navigator,\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let isTransitioning = routerState != null &&\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  useViewTransitionState(path) && viewTransition === true;\n  let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;\n  let locationPathname = location.pathname;\n  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;\n  if (!caseSensitive) {\n    locationPathname = locationPathname.toLowerCase();\n    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;\n    toPathname = toPathname.toLowerCase();\n  }\n  if (nextLocationPathname && basename) {\n    nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;\n  }\n  // If the `to` has a trailing slash, look at that exact spot.  Otherwise,\n  // we're looking for a slash _after_ what's in `to`.  For example:\n  //\n  // <NavLink to=\"/users\"> and <NavLink to=\"/users/\">\n  // both want to look for a / at index 6 to match URL `/users/matt`\n  const endSlashPosition = toPathname !== \"/\" && toPathname.endsWith(\"/\") ? toPathname.length - 1 : toPathname.length;\n  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === \"/\";\n  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === \"/\");\n  let renderProps = {\n    isActive,\n    isPending,\n    isTransitioning\n  };\n  let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n  let className;\n  if (typeof classNameProp === \"function\") {\n    className = classNameProp(renderProps);\n  } else {\n    // If the className prop is not a function, we use a default `active`\n    // class for <NavLink />s that are active. In v5 `active` was the default\n    // value for `activeClassName`, but we are removing that API and can still\n    // use the old default behavior for a cleaner upgrade path and keep the\n    // simple styling rules working as they currently do.\n    className = [classNameProp, isActive ? \"active\" : null, isPending ? \"pending\" : null, isTransitioning ? \"transitioning\" : null].filter(Boolean).join(\" \");\n  }\n  let style = typeof styleProp === \"function\" ? styleProp(renderProps) : styleProp;\n  return /*#__PURE__*/React.createElement(Link, _extends({}, rest, {\n    \"aria-current\": ariaCurrent,\n    className: className,\n    ref: ref,\n    style: style,\n    to: to,\n    viewTransition: viewTransition\n  }), typeof children === \"function\" ? children(renderProps) : children);\n});\nif (process.env.NODE_ENV !== \"production\") {\n  NavLink.displayName = \"NavLink\";\n}\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nconst Form = /*#__PURE__*/React.forwardRef((_ref9, forwardedRef) => {\n  let {\n      fetcherKey,\n      navigate,\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      relative,\n      preventScrollReset,\n      viewTransition\n    } = _ref9,\n    props = _objectWithoutPropertiesLoose(_ref9, _excluded3);\n  let submit = useSubmit();\n  let formAction = useFormAction(action, {\n    relative\n  });\n  let formMethod = method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n  let submitHandler = event => {\n    onSubmit && onSubmit(event);\n    if (event.defaultPrevented) return;\n    event.preventDefault();\n    let submitter = event.nativeEvent.submitter;\n    let submitMethod = (submitter == null ? void 0 : submitter.getAttribute(\"formmethod\")) || method;\n    submit(submitter || event.currentTarget, {\n      fetcherKey,\n      method: submitMethod,\n      navigate,\n      replace,\n      state,\n      relative,\n      preventScrollReset,\n      viewTransition\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"form\", _extends({\n    ref: forwardedRef,\n    method: formMethod,\n    action: formAction,\n    onSubmit: reloadDocument ? onSubmit : submitHandler\n  }, props));\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Form.displayName = \"Form\";\n}\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nfunction ScrollRestoration(_ref10) {\n  let {\n    getKey,\n    storageKey\n  } = _ref10;\n  useScrollRestoration({\n    getKey,\n    storageKey\n  });\n  return null;\n}\nif (process.env.NODE_ENV !== \"production\") {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\nvar DataRouterHook;\n(function (DataRouterHook) {\n  DataRouterHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n  DataRouterHook[\"UseSubmit\"] = \"useSubmit\";\n  DataRouterHook[\"UseSubmitFetcher\"] = \"useSubmitFetcher\";\n  DataRouterHook[\"UseFetcher\"] = \"useFetcher\";\n  DataRouterHook[\"useViewTransitionState\"] = \"useViewTransitionState\";\n})(DataRouterHook || (DataRouterHook = {}));\nvar DataRouterStateHook;\n(function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseFetcher\"] = \"useFetcher\";\n  DataRouterStateHook[\"UseFetchers\"] = \"useFetchers\";\n  DataRouterStateHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n})(DataRouterStateHook || (DataRouterStateHook = {}));\n// Internal hooks\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(UNSAFE_DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(UNSAFE_DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\n// External hooks\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nfunction useLinkClickHandler(to, _temp) {\n  let {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n    viewTransition\n  } = _temp === void 0 ? {} : _temp;\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, {\n    relative\n  });\n  return React.useCallback(event => {\n    if (shouldProcessLinkClick(event, target)) {\n      event.preventDefault();\n      // If the URL hasn't changed, a regular <a> will do a replace instead of\n      // a push, so do the same here unless the replace prop is explicitly set\n      let replace = replaceProp !== undefined ? replaceProp : createPath(location) === createPath(path);\n      navigate(to, {\n        replace,\n        state,\n        preventScrollReset,\n        relative,\n        viewTransition\n      });\n    }\n  }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative, viewTransition]);\n}\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nfunction useSearchParams(defaultInit) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(typeof URLSearchParams !== \"undefined\", \"You cannot use the `useSearchParams` hook in a browser that does not \" + \"support the URLSearchParams API. If you need to support Internet \" + \"Explorer 11, we recommend you load a polyfill such as \" + \"https://github.com/ungap/url-search-params.\") : void 0;\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n  let location = useLocation();\n  let searchParams = React.useMemo(() =>\n  // Only merge in the defaults if we haven't yet called setSearchParams.\n  // Once we call that we want those to take precedence, otherwise you can't\n  // remove a param with setSearchParams({}) if it has an initial value\n  getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [location.search]);\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback((nextInit, navigateOptions) => {\n    const newSearchParams = createSearchParams(typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit);\n    hasSetSearchParamsRef.current = true;\n    navigate(\"?\" + newSearchParams, navigateOptions);\n  }, [navigate, searchParams]);\n  return [searchParams, setSearchParams];\n}\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\"You are calling submit during the server render. \" + \"Try calling submit within a `useEffect` or callback instead.\");\n  }\n}\nlet fetcherId = 0;\nlet getUniqueFetcherId = () => \"__\" + String(++fetcherId) + \"__\";\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nfunction useSubmit() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseSubmit);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let currentRouteId = UNSAFE_useRouteId();\n  return React.useCallback(function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    validateClientSideSubmission();\n    let {\n      action,\n      method,\n      encType,\n      formData,\n      body\n    } = getFormSubmissionInfo(target, basename);\n    if (options.navigate === false) {\n      let key = options.fetcherKey || getUniqueFetcherId();\n      router.fetch(key, currentRouteId, options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        flushSync: options.flushSync\n      });\n    } else {\n      router.navigate(options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        replace: options.replace,\n        state: options.state,\n        fromRouteId: currentRouteId,\n        flushSync: options.flushSync,\n        viewTransition: options.viewTransition\n      });\n    }\n  }, [router, basename, currentRouteId]);\n}\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nfunction useFormAction(action, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let routeContext = React.useContext(UNSAFE_RouteContext);\n  !routeContext ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFormAction must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = _extends({}, useResolvedPath(action ? action : \".\", {\n    relative\n  }));\n  // If no action was specified, browsers will persist current search params\n  // when determining the path, so match that behavior\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to this directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    path.search = location.search;\n    // When grabbing search params from the URL, remove any included ?index param\n    // since it might not apply to our contextual route.  We add it back based\n    // on match.route.index below\n    let params = new URLSearchParams(path.search);\n    let indexValues = params.getAll(\"index\");\n    let hasNakedIndexParam = indexValues.some(v => v === \"\");\n    if (hasNakedIndexParam) {\n      params.delete(\"index\");\n      indexValues.filter(v => v).forEach(v => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? \"?\" + qs : \"\";\n    }\n  }\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nfunction useFetcher(_temp3) {\n  var _route$matches;\n  let {\n    key\n  } = _temp3 === void 0 ? {} : _temp3;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseFetcher);\n  let state = useDataRouterState(DataRouterStateHook.UseFetcher);\n  let fetcherData = React.useContext(FetchersContext);\n  let route = React.useContext(UNSAFE_RouteContext);\n  let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;\n  !fetcherData ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a FetchersContext\") : UNSAFE_invariant(false) : void 0;\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  !(routeId != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  // Fetcher key handling\n  // OK to call conditionally to feature detect `useId`\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  let defaultKey = useIdImpl ? useIdImpl() : \"\";\n  let [fetcherKey, setFetcherKey] = React.useState(key || defaultKey);\n  if (key && key !== fetcherKey) {\n    setFetcherKey(key);\n  } else if (!fetcherKey) {\n    // We will only fall through here when `useId` is not available\n    setFetcherKey(getUniqueFetcherId());\n  }\n  // Registration/cleanup\n  React.useEffect(() => {\n    router.getFetcher(fetcherKey);\n    return () => {\n      // Tell the router we've unmounted - if v7_fetcherPersist is enabled this\n      // will not delete immediately but instead queue up a delete after the\n      // fetcher returns to an `idle` state\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n  // Fetcher additions\n  let load = React.useCallback((href, opts) => {\n    !routeId ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for fetcher.load()\") : UNSAFE_invariant(false) : void 0;\n    router.fetch(fetcherKey, routeId, href, opts);\n  }, [fetcherKey, routeId, router]);\n  let submitImpl = useSubmit();\n  let submit = React.useCallback((target, opts) => {\n    submitImpl(target, _extends({}, opts, {\n      navigate: false,\n      fetcherKey\n    }));\n  }, [fetcherKey, submitImpl]);\n  let FetcherForm = React.useMemo(() => {\n    let FetcherForm = /*#__PURE__*/React.forwardRef((props, ref) => {\n      return /*#__PURE__*/React.createElement(Form, _extends({}, props, {\n        navigate: false,\n        fetcherKey: fetcherKey,\n        ref: ref\n      }));\n    });\n    if (process.env.NODE_ENV !== \"production\") {\n      FetcherForm.displayName = \"fetcher.Form\";\n    }\n    return FetcherForm;\n  }, [fetcherKey]);\n  // Exposed FetcherWithComponents\n  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;\n  let data = fetcherData.get(fetcherKey);\n  let fetcherWithComponents = React.useMemo(() => _extends({\n    Form: FetcherForm,\n    submit,\n    load\n  }, fetcher, {\n    data\n  }), [FetcherForm, submit, load, fetcher, data]);\n  return fetcherWithComponents;\n}\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nfunction useFetchers() {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return Array.from(state.fetchers.entries()).map(_ref11 => {\n    let [key, fetcher] = _ref11;\n    return _extends({}, fetcher, {\n      key\n    });\n  });\n}\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions = {};\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration(_temp4) {\n  let {\n    getKey,\n    storageKey\n  } = _temp4 === void 0 ? {} : _temp4;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let {\n    restoreScrollPosition,\n    preventScrollReset\n  } = useDataRouterState(DataRouterStateHook.UseScrollRestoration);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n  // Save positions on pagehide\n  usePageHide(React.useCallback(() => {\n    if (navigation.state === \"idle\") {\n      let key = (getKey ? getKey(location, matches) : null) || location.key;\n      savedScrollPositions[key] = window.scrollY;\n    }\n    try {\n      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));\n    } catch (error) {\n      process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (\" + error + \").\") : void 0;\n    }\n    window.history.scrollRestoration = \"auto\";\n  }, [storageKey, getKey, navigation.state, location, matches]));\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename = getKey && basename !== \"/\" ? (location, matches) => getKey( // Strip the basename to match useLocation()\n      _extends({}, location, {\n        pathname: stripBasename(location.pathname, basename) || location.pathname\n      }), matches) : getKey;\n      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction useBeforeUnload(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt(_ref12) {\n  let {\n    when,\n    message\n  } = _ref12;\n  let blocker = useBlocker(when);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        // This timeout is needed to avoid a weird \"race\" on POP navigations\n        // between the `window.history` revert navigation and the result of\n        // `window.confirm`\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\n/**\n * Return a boolean indicating if there is an active view transition to the\n * given href.  You can use this value to render CSS classes or viewTransitionName\n * styles onto your elements\n *\n * @param href The destination href\n * @param [opts.relative] Relative routing type (\"route\" | \"path\")\n */\nfunction useViewTransitionState(to, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let vtContext = React.useContext(ViewTransitionContext);\n  !(vtContext != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  \" + \"Did you accidentally import `RouterProvider` from `react-router`?\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename\n  } = useDataRouterContext(DataRouterHook.useViewTransitionState);\n  let path = useResolvedPath(to, {\n    relative: opts.relative\n  });\n  if (!vtContext.isTransitioning) {\n    return false;\n  }\n  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;\n  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;\n  // Transition is active if we're going to or coming from the indicated\n  // destination.  This ensures that other PUSH navigations that reverse\n  // an indicated transition apply.  I.e., on the list view you have:\n  //\n  //   <NavLink to=\"/details/1\" viewTransition>\n  //\n  // If you click the breadcrumb back to the list view:\n  //\n  //   <NavLink to=\"/list\" viewTransition>\n  //\n  // We should apply the transition because it's indicated as active going\n  // from /list -> /details/1 and therefore should be active on the reverse\n  // (even though this isn't strictly a POP reverse)\n  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;\n}\n//#endregion\n\nexport { BrowserRouter, Form, HashRouter, Link, NavLink, RouterProvider, ScrollRestoration, FetchersContext as UNSAFE_FetchersContext, ViewTransitionContext as UNSAFE_ViewTransitionContext, useScrollRestoration as UNSAFE_useScrollRestoration, createBrowserRouter, createHashRouter, createSearchParams, HistoryRouter as unstable_HistoryRouter, usePrompt as unstable_usePrompt, useBeforeUnload, useFetcher, useFetchers, useFormAction, useLinkClickHandler, useSearchParams, useSubmit, useViewTransitionState };\n//# sourceMappingURL=index.js.map\n","import React, { createContext, useContext, useState, useEffect, useCallback } from 'react'\n\ninterface ETF {\n  symbol: string\n  name: string\n  sector?: string\n  marketCap?: string\n  exchange?: string\n  isActive?: boolean\n}\n\ninterface ETFContextType {\n  selectedETF: string\n  setSelectedETF: (symbol: string) => void\n  availableETFs: ETF[]\n  fetchAvailableETFs: () => Promise<void>\n  isValidETF: (symbol: string) => Promise<boolean>\n  fetchStockData: (symbol: string) => Promise<boolean>\n  isLoading: boolean\n  error: string | null\n}\n\nconst ETFContext = createContext<ETFContextType | undefined>(undefined)\n\nexport const useETF = () => {\n  const context = useContext(ETFContext)\n  if (context === undefined) {\n    throw new Error('useETF must be used within an ETFProvider')\n  }\n  return context\n}\n\nexport const ETFProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [selectedETF, setSelectedETF] = useState('QQQ')\n  const [availableETFs, setAvailableETFs] = useState<ETF[]>([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  const fetchAvailableETFs = useCallback(async () => {\n    try {\n      setIsLoading(true)\n      setError(null)\n      \n      const response = await fetch('/api/symbols?limit=100')\n      if (response.ok) {\n        const data = await response.json()\n        if (data.status === 'success') {\n          setAvailableETFs(data.symbols)\n        } else {\n          setError('Failed to fetch symbols')\n        }\n      } else {\n        setError('Failed to fetch symbols')\n      }\n    } catch (error) {\n      console.error('Failed to fetch available ETFs:', error)\n      setError('Failed to fetch symbols')\n    } finally {\n      setIsLoading(false)\n    }\n  }, [])\n\n  const isValidETF = useCallback(async (symbol: string): Promise<boolean> => {\n    if (!symbol) return false\n\n    try {\n      // First check if it's in our available symbols\n      const existsInDB = availableETFs.some(etf =>\n        etf.symbol.toUpperCase() === symbol.toUpperCase()\n      )\n\n      if (existsInDB) return true\n\n      // If not in our DB, check if it exists via API\n      const response = await fetch(`/api/symbols/${symbol.toUpperCase()}`)\n      if (response.ok) {\n        const data = await response.json()\n        return data.status === 'success'\n      }\n\n      return false\n    } catch (error) {\n      console.error('Error checking symbol validity:', error)\n      return false\n    }\n  }, [availableETFs])\n\n  const fetchStockData = useCallback(async (symbol: string): Promise<boolean> => {\n    if (!symbol) return false\n\n    try {\n      setIsLoading(true)\n      setError(null)\n\n      const response = await fetch('/api/fetch-single-etf', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ symbol: symbol.toUpperCase() })\n      })\n\n      if (response.ok) {\n        const data = await response.json()\n        if (data.status === 'success') {\n          // Add a small delay to show the success state\n          setTimeout(() => {\n            setIsLoading(false)\n          }, 500)\n          return true\n        } else {\n          setError(`Failed to fetch data for ${symbol}: ${data.message || 'Unknown error'}`)\n          setIsLoading(false)\n          return false\n        }\n      } else {\n        setError(`Failed to fetch data for ${symbol}`)\n        setIsLoading(false)\n        return false\n      }\n    } catch (error) {\n      console.error('Error fetching stock data:', error)\n      setError(`Error fetching data for ${symbol}`)\n      setIsLoading(false)\n      return false\n    }\n  }, [])\n\n  useEffect(() => {\n    fetchAvailableETFs()\n  }, [fetchAvailableETFs])\n\n  const value: ETFContextType = {\n    selectedETF,\n    setSelectedETF,\n    availableETFs,\n    fetchAvailableETFs,\n    isValidETF,\n    fetchStockData,\n    isLoading,\n    error\n  }\n\n  return <ETFContext.Provider value={value}>{children}</ETFContext.Provider>\n}\n","import { createContext, useContext, useState, ReactNode } from 'react'\r\n\r\ninterface ThresholdContextType {\r\n  threshold: number\r\n  setThreshold: (threshold: number) => void\r\n  availableThresholds: Array<{ value: number; label: string; description: string }>\r\n}\r\n\r\nconst ThresholdContext = createContext<ThresholdContextType | undefined>(undefined)\r\n\r\nexport function ThresholdProvider({ children }: { children: ReactNode }) {\r\n  const [threshold, setThreshold] = useState(5)\r\n  \r\n  const availableThresholds = [\r\n    { value: 1, label: '1%', description: 'Very mild corrections' },\r\n    { value: 1.5, label: '1.5%', description: 'Minor corrections' },\r\n    { value: 2, label: '2%', description: 'Small corrections' },\r\n    { value: 2.5, label: '2.5%', description: 'Light corrections' },\r\n    { value: 3, label: '3%', description: 'Mild corrections' },\r\n    { value: 4, label: '4%', description: 'Moderate corrections' },\r\n    { value: 5, label: '5%', description: 'Standard corrections' },\r\n    { value: 6, label: '6%', description: 'Notable corrections' },\r\n    { value: 7, label: '7%', description: 'Meaningful corrections' },\r\n    { value: 8, label: '8%', description: 'Significant corrections' },\r\n    { value: 9, label: '9%', description: 'Strong corrections' },\r\n    { value: 10, label: '10%', description: 'Major corrections' },\r\n    { value: 12, label: '12%', description: 'Large corrections' },\r\n    { value: 15, label: '15%', description: 'Substantial drawdowns' },\r\n    { value: 18, label: '18%', description: 'Major drawdowns' },\r\n    { value: 20, label: '20%', description: 'Bear market territory' },\r\n    { value: 25, label: '25%', description: 'Severe bear markets' },\r\n    { value: 30, label: '30%', description: 'Extreme drawdowns' }\r\n  ]\r\n\r\n  return (\r\n    <ThresholdContext.Provider value={{ threshold, setThreshold, availableThresholds }}>\r\n      {children}\r\n    </ThresholdContext.Provider>\r\n  )\r\n}\r\n\r\nexport function useThreshold() {\r\n  const context = useContext(ThresholdContext)\r\n  if (context === undefined) {\r\n    throw new Error('useThreshold must be used within a ThresholdProvider')\r\n  }\r\n  return context\r\n}\r\n","import { createContext, useContext, useState, useCallback, ReactNode, useEffect } from 'react'\nimport { useETF } from './ETFContext'\nimport { useThreshold } from './ThresholdContext'\n\ninterface CycleData {\n  cycle_number: number\n  severity: string\n  // Dynamic fields based on selected ETF\n  ath_date: string\n  ath_price: number\n  low_date: string\n  low_price: number\n  recovery_date: string | null\n  recovery_price: number | null\n  drawdown_pct: number\n  // Keep original fields for compatibility\n  [key: string]: any\n}\n\ninterface SummaryData {\n  threshold: number\n  totalCycles: number\n  severeCycles: number\n  moderateCycles: number\n  mildCycles: number\n  maxDrawdown: number\n  avgDrawdown: number\n  avgTQQQDrawdown?: number\n}\n\ninterface DataContextType {\n  cycles: CycleData[]\n  summary: SummaryData | null\n  isLoading: boolean\n  error: string | null\n  fetchCycles: (threshold: number) => Promise<void>\n  fetchSummary: (threshold: number) => Promise<void>\n  clearError: () => void\n}\n\nconst DataContext = createContext<DataContextType | undefined>(undefined)\n\nexport function DataProvider({ children }: { children: ReactNode }) {\n  const { selectedETF } = useETF()\n  const { threshold } = useThreshold()\n  const [cycles, setCycles] = useState<CycleData[]>([])\n  const [summary, setSummary] = useState<SummaryData | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  const fetchCycles = useCallback(async (threshold: number) => {\n    setIsLoading(true)\n    setError(null)\n    try {\n      const response = await fetch(`/api/cycles/${threshold}/${selectedETF}`)\n      if (!response.ok) throw new Error('Failed to fetch cycles data')\n      const data = await response.json()\n      setCycles(data.cycles)\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred')\n    } finally {\n      setIsLoading(false)\n    }\n  }, [selectedETF])\n\n  const fetchSummary = useCallback(async (threshold: number) => {\n    setIsLoading(true)\n    setError(null)\n    try {\n      const response = await fetch(`/api/summary/${threshold}/${selectedETF}`)\n      if (!response.ok) throw new Error('Failed to fetch summary data')\n      const data = await response.json()\n      setSummary(data)\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred')\n    } finally {\n      setIsLoading(false)\n    }\n  }, [selectedETF])\n\n  // Auto-fetch data when selectedETF or threshold changes\n  useEffect(() => {\n    if (selectedETF && threshold) {\n      fetchCycles(threshold)\n      fetchSummary(threshold)\n    }\n  }, [selectedETF, threshold, fetchCycles, fetchSummary])\n\n  const clearError = () => setError(null)\n\n  return (\n    <DataContext.Provider value={{\n      cycles,\n      summary,\n      isLoading,\n      error,\n      fetchCycles,\n      fetchSummary,\n      clearError\n    }}>\n      {children}\n    </DataContext.Provider>\n  )\n}\n\nexport function useData() {\n  const context = useContext(DataContext)\n  if (context === undefined) {\n    throw new Error('useData must be used within a DataProvider')\n  }\n  return context\n}\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nvar defaultAttributes = {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: 24,\n  height: 24,\n  viewBox: \"0 0 24 24\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  strokeWidth: 2,\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"round\"\n};\n\nexport { defaultAttributes as default };\n//# sourceMappingURL=defaultAttributes.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport { forwardRef, createElement } from 'react';\nimport defaultAttributes from './defaultAttributes.js';\n\nconst toKebabCase = (string) => string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase().trim();\nconst createLucideIcon = (iconName, iconNode) => {\n  const Component = forwardRef(\n    ({ color = \"currentColor\", size = 24, strokeWidth = 2, absoluteStrokeWidth, className = \"\", children, ...rest }, ref) => createElement(\n      \"svg\",\n      {\n        ref,\n        ...defaultAttributes,\n        width: size,\n        height: size,\n        stroke: color,\n        strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,\n        className: [\"lucide\", `lucide-${toKebabCase(iconName)}`, className].join(\" \"),\n        ...rest\n      },\n      [\n        ...iconNode.map(([tag, attrs]) => createElement(tag, attrs)),\n        ...Array.isArray(children) ? children : [children]\n      ]\n    )\n  );\n  Component.displayName = `${iconName}`;\n  return Component;\n};\n\nexport { createLucideIcon as default, toKebabCase };\n//# sourceMappingURL=createLucideIcon.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst BarChart3 = createLucideIcon(\"BarChart3\", [\n  [\"path\", { d: \"M3 3v18h18\", key: \"1s2lah\" }],\n  [\"path\", { d: \"M18 17V9\", key: \"2bz60n\" }],\n  [\"path\", { d: \"M13 17V5\", key: \"1frdt8\" }],\n  [\"path\", { d: \"M8 17v-3\", key: \"17ska0\" }]\n]);\n\nexport { BarChart3 as default };\n//# sourceMappingURL=bar-chart-3.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Calculator = createLucideIcon(\"Calculator\", [\n  [\"rect\", { width: \"16\", height: \"20\", x: \"4\", y: \"2\", rx: \"2\", key: \"1nb95v\" }],\n  [\"line\", { x1: \"8\", x2: \"16\", y1: \"6\", y2: \"6\", key: \"x4nwl0\" }],\n  [\"line\", { x1: \"16\", x2: \"16\", y1: \"14\", y2: \"18\", key: \"wjye3r\" }],\n  [\"path\", { d: \"M16 10h.01\", key: \"1m94wz\" }],\n  [\"path\", { d: \"M12 10h.01\", key: \"1nrarc\" }],\n  [\"path\", { d: \"M8 10h.01\", key: \"19clt8\" }],\n  [\"path\", { d: \"M12 14h.01\", key: \"1etili\" }],\n  [\"path\", { d: \"M8 14h.01\", key: \"6423bh\" }],\n  [\"path\", { d: \"M12 18h.01\", key: \"mhygvu\" }],\n  [\"path\", { d: \"M8 18h.01\", key: \"lrp35t\" }]\n]);\n\nexport { Calculator as default };\n//# sourceMappingURL=calculator.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Calendar = createLucideIcon(\"Calendar\", [\n  [\"rect\", { width: \"18\", height: \"18\", x: \"3\", y: \"4\", rx: \"2\", ry: \"2\", key: \"eu3xkr\" }],\n  [\"line\", { x1: \"16\", x2: \"16\", y1: \"2\", y2: \"6\", key: \"m3sa8f\" }],\n  [\"line\", { x1: \"8\", x2: \"8\", y1: \"2\", y2: \"6\", key: \"18kwsl\" }],\n  [\"line\", { x1: \"3\", x2: \"21\", y1: \"10\", y2: \"10\", key: \"xt86sb\" }]\n]);\n\nexport { Calendar as default };\n//# sourceMappingURL=calendar.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst DollarSign = createLucideIcon(\"DollarSign\", [\n  [\"line\", { x1: \"12\", x2: \"12\", y1: \"2\", y2: \"22\", key: \"7eqyqh\" }],\n  [\"path\", { d: \"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\", key: \"1b0p4s\" }]\n]);\n\nexport { DollarSign as default };\n//# sourceMappingURL=dollar-sign.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Download = createLucideIcon(\"Download\", [\n  [\"path\", { d: \"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\", key: \"ih7n3h\" }],\n  [\"polyline\", { points: \"7 10 12 15 17 10\", key: \"2ggqvy\" }],\n  [\"line\", { x1: \"12\", x2: \"12\", y1: \"15\", y2: \"3\", key: \"1vk2je\" }]\n]);\n\nexport { Download as default };\n//# sourceMappingURL=download.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst RefreshCw = createLucideIcon(\"RefreshCw\", [\n  [\"path\", { d: \"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\", key: \"v9h5vc\" }],\n  [\"path\", { d: \"M21 3v5h-5\", key: \"1q7to0\" }],\n  [\"path\", { d: \"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\", key: \"3uifl3\" }],\n  [\"path\", { d: \"M8 16H3v5\", key: \"1cv678\" }]\n]);\n\nexport { RefreshCw as default };\n//# sourceMappingURL=refresh-cw.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Search = createLucideIcon(\"Search\", [\n  [\"circle\", { cx: \"11\", cy: \"11\", r: \"8\", key: \"4ej97u\" }],\n  [\"path\", { d: \"m21 21-4.3-4.3\", key: \"1qie3q\" }]\n]);\n\nexport { Search as default };\n//# sourceMappingURL=search.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst TrendingDown = createLucideIcon(\"TrendingDown\", [\n  [\"polyline\", { points: \"22 17 13.5 8.5 8.5 13.5 2 7\", key: \"1r2t7k\" }],\n  [\"polyline\", { points: \"16 17 22 17 22 11\", key: \"11uiuu\" }]\n]);\n\nexport { TrendingDown as default };\n//# sourceMappingURL=trending-down.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst TrendingUp = createLucideIcon(\"TrendingUp\", [\n  [\"polyline\", { points: \"22 7 13.5 15.5 8.5 10.5 2 17\", key: \"126l90\" }],\n  [\"polyline\", { points: \"16 7 22 7 22 13\", key: \"kwv8wd\" }]\n]);\n\nexport { TrendingUp as default };\n//# sourceMappingURL=trending-up.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst X = createLucideIcon(\"X\", [\n  [\"path\", { d: \"M18 6 6 18\", key: \"1bl5f8\" }],\n  [\"path\", { d: \"m6 6 12 12\", key: \"d8bk6v\" }]\n]);\n\nexport { X as default };\n//# sourceMappingURL=x.js.map\n","import React, { useEffect, useState } from 'react'\nimport { Download, Search, TrendingDown, X, Calendar, TrendingUp } from 'lucide-react'\nimport { useThreshold } from '../contexts/ThresholdContext'\nimport { useData } from '../contexts/DataContext'\nimport { useETF } from '../contexts/ETFContext'\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ReferenceLine,\n  ReferenceArea\n} from 'recharts'\n\ninterface CyclesProps {\n  selectedSymbol?: string;\n}\n\nexport default function Cycles({ selectedSymbol }: CyclesProps) {\n  const { threshold, availableThresholds, setThreshold } = useThreshold()\n  const { cycles, fetchCycles, isLoading, error } = useData()\n  const { selectedETF, setSelectedETF } = useETF()\n  \n  // Debug logging\n  console.log('🔍 Cycles component - Debug info:', {\n    threshold,\n    availableThresholds: availableThresholds?.length || 0,\n    selectedETF,\n    selectedSymbol\n  })\n  const [searchTerm, setSearchTerm] = useState('')\n  const [severityFilter, setSeverityFilter] = useState('all')\n  const [sortField, setSortField] = useState('ath_date')\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc')\n  const [selectedCycle, setSelectedCycle] = useState<any>(null)\n  const [currentPrice, setCurrentPrice] = useState<number | null>(null)\n  const [chartData, setChartData] = useState<any>(null)\n  \n  // Set the selected ETF if passed from Dashboard\n  useEffect(() => {\n    if (selectedSymbol && selectedSymbol !== selectedETF) {\n      console.log(`🔄 Setting selected ETF to ${selectedSymbol} from Dashboard`)\n      setSelectedETF(selectedSymbol)\n    }\n  }, [selectedSymbol, selectedETF, setSelectedETF])\n\n  // Function to fetch current price - IMPROVED with better error handling and fallbacks\n  const fetchCurrentPrice = async () => {\n    if (!selectedETF) return\n    \n    try {\n      console.log(`🔍 Fetching current price for ${selectedETF}...`)\n      \n      // Try to get the most recent price from the database first\n      const response = await fetch(`/api/chart-data/${threshold}/${selectedETF}`)\n      if (response.ok) {\n        const data = await response.json()\n        console.log(`📊 Chart data response:`, data)\n        \n        if (data && data.data && data.data.length > 0) {\n          // Get the most recent price (last entry in the data)\n          const latestPrice = data.data[data.data.length - 1].close\n          console.log(`✅ Using latest price from chart data: $${latestPrice}`)\n          setCurrentPrice(latestPrice)\n          return\n        } else {\n          console.log(`⚠️ No price data in chart-data response for ${selectedETF}`)\n        }\n      } else {\n        console.log(`⚠️ Chart data request failed: ${response.status}`)\n      }\n      \n      // If no data in database, fetch fresh data from Stooq\n      console.log(`🔄 Fetching fresh price data for ${selectedETF} from Stooq...`)\n      const stooqResponse = await fetch(`/api/fetch-historical-data/${selectedETF}`)\n      if (stooqResponse.ok) {\n        const stooqData = await stooqResponse.json()\n        console.log(`📊 Stooq response:`, stooqData)\n        \n        if (stooqData.status === 'success' && stooqData.data && stooqData.data.length > 0) {\n          const latestPrice = stooqData.data[stooqData.data.length - 1].close\n          console.log(`✅ Using latest price from Stooq: $${latestPrice}`)\n          setCurrentPrice(latestPrice)\n        } else {\n          console.error(`❌ Failed to get price data for ${selectedETF}:`, stooqData)\n        }\n      } else {\n        console.error(`❌ Stooq API request failed for ${selectedETF}:`, stooqResponse.status)\n      }\n      \n      // If we still don't have a price, try to get it from the cycles data as a last resort\n      if (!currentPrice && cycles && cycles.length > 0) {\n        console.log(`🔄 Last resort: Using most recent cycle data for ${selectedETF}`)\n        const mostRecentCycle = cycles[0];\n        if (mostRecentCycle.recovery_price) {\n          console.log(`✅ Using recovery price from most recent cycle: $${mostRecentCycle.recovery_price}`)\n          setCurrentPrice(mostRecentCycle.recovery_price)\n        } else if (mostRecentCycle.low_price) {\n          console.log(`✅ Using low price from most recent cycle as current: $${mostRecentCycle.low_price}`)\n          setCurrentPrice(mostRecentCycle.low_price)\n        }\n      }\n      \n    } catch (error) {\n      console.error('❌ Error fetching current price:', error)\n      \n      // Final fallback: use cycle data if available\n      if (!currentPrice && cycles && cycles.length > 0) {\n        console.log(`🔄 Error fallback: Using cycle data for ${selectedETF}`)\n        const mostRecentCycle = cycles[0];\n        if (mostRecentCycle.recovery_price) {\n          setCurrentPrice(mostRecentCycle.recovery_price)\n        } else if (mostRecentCycle.low_price) {\n          setCurrentPrice(mostRecentCycle.low_price)\n        }\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (selectedETF) {\n      fetchCycles(threshold)\n    }\n  }, [threshold, selectedETF, fetchCycles])\n\n  // Also fetch cycles when selectedSymbol changes (for Dashboard integration)\n  useEffect(() => {\n    if (selectedSymbol && selectedSymbol !== selectedETF) {\n      console.log(`🔄 Dashboard integration: Fetching cycles for ${selectedSymbol}`)\n      fetchCycles(threshold)\n    }\n  }, [selectedSymbol, threshold, fetchCycles])\n\n  useEffect(() => {\n    fetchCurrentPrice()\n  }, [selectedETF]) // Fetch when ETF changes\n\n  // Function to fetch chart data for the selected cycle\n  const fetchChartData = async () => {\n    if (!selectedETF) return\n    \n    try {\n      const response = await fetch(`/api/chart-data/${threshold}/${selectedETF}`)\n      if (response.ok) {\n        const data = await response.json()\n        setChartData(data)\n      } else {\n        console.error('Failed to fetch chart data')\n      }\n    } catch (err) {\n      console.error('Error fetching chart data:', err)\n    }\n  }\n\n  // Fetch chart data when a cycle is selected\n  useEffect(() => {\n    if (selectedCycle) {\n      fetchChartData()\n    }\n  }, [selectedCycle, selectedETF, threshold])\n\n  const filteredCycles = cycles\n    .filter(cycle => {\n      const matchesSearch = \n        cycle.cycle_number.toString().includes(searchTerm) ||\n        cycle.severity.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        cycle.ath_date.includes(searchTerm) ||\n        cycle.low_date.includes(searchTerm)\n      \n      const matchesSeverity = severityFilter === 'all' || cycle.severity.toLowerCase() === severityFilter.toLowerCase()\n      \n      return matchesSearch && matchesSeverity\n    })\n    .sort((a, b) => {\n      const aValue = a[sortField as keyof typeof a]\n      const bValue = b[sortField as keyof typeof b]\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue)\n      }\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue\n      }\n      \n      return 0\n    })\n\n  const handleSort = (field: string) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')\n    } else {\n      setSortField(field)\n      setSortDirection('asc')\n    }\n  }\n\n  const exportToCSV = () => {\n    const headers = [\n      'Cycle', 'Severity', 'ATH Date', 'ATH Price', 'Low Date', 'Low Price',\n      'Recovery Date', 'Recovery Price', 'Drawdown %', 'ATH to Low (Days)', 'Low to Recovery (Days)'\n    ]\n    \n    const csvContent = [\n      headers.join(','),\n      ...filteredCycles.map(cycle => [\n        cycle.cycle_number,\n        cycle.severity,\n        cycle.ath_date,\n        cycle.ath_price,\n        cycle.low_date,\n        cycle.low_price,\n        cycle.recovery_date || '',\n        cycle.recovery_price || '',\n        cycle.drawdown_pct,\n        calculateDuration(cycle.ath_date, cycle.low_date),\n        cycle.recovery_date ? calculateDuration(cycle.low_date, cycle.recovery_date) : 'Ongoing'\n      ].join(','))\n    ].join('\\n')\n    \n    const blob = new Blob([csvContent], { type: 'text/csv' })\n    const url = window.URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = `${selectedETF.toLowerCase()}_cycles_${threshold}pct.csv`\n    a.click()\n    window.URL.revokeObjectURL(url)\n  }\n\n  const getSeverityBadge = (severity: string) => {\n    const colors = {\n      severe: 'bg-red-100 text-red-800',\n      moderate: 'bg-yellow-100 text-yellow-800',\n      mild: 'bg-green-100 text-green-800'\n    }\n    return colors[severity.toLowerCase() as keyof typeof colors] || 'bg-blue-100 text-blue-800'\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(price)\n  }\n\n  const calculateDuration = (startDate: string, endDate: string) => {\n    if (!startDate || !endDate) return 0\n    const start = new Date(startDate)\n    const end = new Date(endDate)\n    const diffTime = Math.abs(end.getTime() - start.getTime())\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))\n    return diffDays\n  }\n\n  // Chart helper functions\n  const formatChartDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  const formatChartPrice = (price: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(price)\n  }\n\n  // Get filtered chart data for the selected cycle period\n  const getCycleChartData = () => {\n    if (!chartData || !selectedCycle) return []\n    \n    const cycleStart = new Date(selectedCycle.ath_date)\n    const cycleEnd = selectedCycle.recovery_date ? new Date(selectedCycle.recovery_date) : new Date()\n    \n    // Add some padding before and after the cycle for context\n    const paddingDays = 30\n    const paddedStart = new Date(cycleStart.getTime() - (paddingDays * 24 * 60 * 60 * 1000))\n    const paddedEnd = new Date(cycleEnd.getTime() + (paddingDays * 24 * 60 * 60 * 1000))\n    \n    return chartData.data.filter((point: any) => {\n      const pointDate = new Date(point.date)\n      return pointDate >= paddedStart && pointDate <= paddedEnd\n    })\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600\"></div>\n        </div>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"w-full\">\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6 text-center\">\n          <div className=\"text-red-600 mb-4\">\n            <TrendingDown className=\"w-16 h-16 mx-auto\" />\n          </div>\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Error Loading Data</h3>\n          <p className=\"text-gray-600 mb-4\">{error}</p>\n          <button \n            onClick={() => fetchCycles(threshold)}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n          >\n            Try Again\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"w-full\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n          {selectedETF} Drawdown Cycles\n        </h2>\n        <p className=\"text-gray-600\">\n          {threshold}%+ threshold • {cycles.length} total cycles\n        </p>\n        <p className=\"text-sm text-blue-600 mt-2\">\n          💡 Click on any row to view detailed analysis for that cycle\n        </p>\n      </div>\n\n      {/* Threshold info display only */}\n      <div className=\"bg-blue-50 rounded-lg border border-blue-200 p-4 mb-6\">\n        <div className=\"flex items-center justify-center gap-4\">\n          <div className=\"text-center\">\n            <div className=\"text-sm text-gray-600 mb-2\">Current Threshold</div>\n            <div className=\"px-4 py-2 bg-blue-100 text-blue-800 rounded-full text-lg font-bold\">\n              {threshold}%\n            </div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-sm text-gray-600 mb-2\">Cycles Found</div>\n            <div className=\"px-4 py-2 bg-green-100 text-green-800 rounded-full text-lg font-bold\">\n              {cycles.length}\n            </div>\n          </div>\n          <div className=\"text-sm text-gray-500 text-center\">\n            💡 Use the threshold selector above to change the threshold and refresh cycles\n          </div>\n        </div>\n      </div>\n\n\n\n      {/* Controls */}\n      <div className=\"bg-gray-50 rounded-lg border border-gray-200 p-4 mb-6\">\n        <div className=\"flex flex-col sm:flex-row gap-4 items-center justify-between\">\n          <div className=\"flex flex-col sm:flex-row gap-4 flex-1\">\n            {/* Search */}\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search cycles...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 pl-10\"\n              />\n            </div>\n\n            {/* Severity Filter */}\n            <select\n              value={severityFilter}\n              onChange={(e) => setSeverityFilter(e.target.value)}\n              className=\"px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 max-w-xs\"\n            >\n              <option value=\"all\">All Severities</option>\n              <option value=\"severe\">Severe</option>\n              <option value=\"moderate\">Moderate</option>\n              <option value=\"mild\">Mild</option>\n            </select>\n          </div>\n\n          {/* Export Button */}\n          <button\n            onClick={exportToCSV}\n            className=\"px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 flex items-center space-x-2\"\n          >\n            <Download className=\"w-4 h-4\" />\n            <span>Export CSV</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Results Summary */}\n      <div className=\"mb-6\">\n        <p className=\"text-sm text-gray-600\">\n          Showing {filteredCycles.length} of {cycles.length} cycles\n        </p>\n      </div>\n\n      {/* Cycles Table */}\n      <div className=\"bg-gray-50 rounded-lg border border-gray-200 overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                {[\n                  { key: 'cycle_number', label: 'Cycle', sortable: true },\n                  { key: 'severity', label: 'Severity', sortable: true },\n                  { key: 'ath_date', label: 'ATH Date', sortable: true },\n                  { key: 'ath_price', label: 'ATH Price', sortable: true },\n                  { key: 'low_date', label: 'Low Date', sortable: true },\n                  { key: 'low_price', label: 'Low Price', sortable: true },\n                  { key: 'drawdown_pct', label: 'Drawdown %', sortable: true },\n                  { key: 'ath_to_low_days', label: 'ATH→Low', sortable: true },\n                  { key: 'low_to_recovery_days', label: 'Low→Recovery', sortable: true }\n                ].map(column => (\n                  <th\n                    key={column.key}\n                    className={`px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 ${\n                      column.sortable ? 'cursor-pointer' : ''\n                    }`}\n                    onClick={() => column.sortable && handleSort(column.key)}\n                  >\n                    <div className=\"flex items-center space-x-1\">\n                      <span>{column.label}</span>\n                      {column.sortable && sortField === column.key && (\n                        <span className=\"text-primary-600\">\n                          {sortDirection === 'asc' ? '↑' : '↓'}\n                        </span>\n                      )}\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {filteredCycles.map((cycle, index) => (\n                <React.Fragment key={cycle.cycle_number}>\n                  <tr \n                    className={`cursor-pointer transition-colors ${\n                      selectedCycle?.cycle_number === cycle.cycle_number\n                        ? 'bg-blue-50 border-l-4 border-blue-500'\n                        : 'hover:bg-gray-50'\n                    }`}\n                    onClick={() => setSelectedCycle(selectedCycle?.cycle_number === cycle.cycle_number ? null : cycle)}\n                  >\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                      <div className=\"flex items-center\">\n                        <span>{cycle.cycle_number}</span>\n                        {selectedCycle?.cycle_number === cycle.cycle_number && (\n                          <TrendingUp className=\"w-4 h-4 ml-2 text-blue-500\" />\n                        )}\n                      </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getSeverityBadge(cycle.severity)}`}>\n                      {cycle.severity}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {new Date(cycle.ath_date).toLocaleDateString()}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      ${cycle.ath_price.toFixed(2)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {new Date(cycle.low_date).toLocaleDateString()}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      ${cycle.low_price.toFixed(2)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {cycle.drawdown_pct.toFixed(1)}%\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      <span className=\"font-medium text-gray-700\">\n                        {calculateDuration(cycle.ath_date, cycle.low_date)} days\n                      </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {cycle.recovery_date ? (\n                        <span className=\"font-medium text-green-600\">\n                          {calculateDuration(cycle.low_date, cycle.recovery_date)} days\n                        </span>\n                      ) : (\n                        <span className=\"text-gray-400 italic\">Ongoing</span>\n                      )}\n                    </td>\n                  </tr>\n                  \n                  {/* Inline Analysis Panel - Shows immediately after selected row */}\n                  {selectedCycle?.cycle_number === cycle.cycle_number && (\n                    <tr className=\"bg-blue-50\">\n                      <td colSpan={9} className=\"px-6 py-4\">\n                        <div className=\"bg-white rounded-lg border border-blue-200 shadow-sm\">\n                          {/* Analysis Header */}\n                          <div className=\"flex justify-between items-start p-4 border-b border-blue-200\">\n                            <div>\n                              <h4 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n                                <Calendar className=\"w-5 h-5 mr-2 text-blue-500\" />\n                                Cycle {selectedCycle.cycle_number} Analysis - {formatDate(selectedCycle.ath_date)}\n                              </h4>\n                              <p className=\"text-gray-600 mt-1\">\n                                Detailed breakdown of this {selectedCycle.severity.toLowerCase()} drawdown cycle\n                              </p>\n                            </div>\n                            <button\n                              onClick={() => setSelectedCycle(null)}\n                              className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n                            >\n                              <X className=\"w-5 h-5\" />\n                            </button>\n                          </div>\n\n                          {/* Analysis Content */}\n                          <div className=\"p-4\">\n                            {/* Key Metrics Grid */}\n                            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                              {/* All-Time High */}\n                              <div className=\"space-y-2\">\n                                <h5 className=\"font-semibold text-gray-900 flex items-center text-sm\">\n                                  <TrendingUp className=\"w-4 h-4 mr-2 text-green-500\" />\n                                  All-Time High\n                                </h5>\n                                <div className=\"bg-green-50 border border-green-200 p-3 rounded-lg\">\n                                  <p className=\"text-xl font-bold text-green-600\">{formatPrice(selectedCycle.ath_price)}</p>\n                                  <p className=\"text-xs text-gray-600\">{formatDate(selectedCycle.ath_date)}</p>\n                                </div>\n                              </div>\n\n                              {/* Low Point */}\n                              <div className=\"space-y-2\">\n                                <h5 className=\"font-semibold text-gray-900 flex items-center text-sm\">\n                                  <TrendingDown className=\"w-4 h-4 mr-2 text-red-500\" />\n                                  Low Point\n                                </h5>\n                                <div className=\"bg-red-50 border border-red-200 p-3 rounded-lg\">\n                                  <p className=\"text-xl font-bold text-red-600\">{formatPrice(selectedCycle.low_price)}</p>\n                                  <p className=\"text-xs text-gray-600\">{formatDate(selectedCycle.low_date)}</p>\n                                  <p className=\"text-xs text-red-600 font-medium\">\n                                    {selectedCycle.drawdown_pct.toFixed(1)}% drawdown\n                                  </p>\n                                </div>\n                              </div>\n\n                              {/* Recovery */}\n                              <div className=\"space-y-2\">\n                                <h5 className=\"font-semibold text-gray-900 flex items-center text-sm\">\n                                  <TrendingUp className=\"w-4 h-4 mr-2 text-blue-500\" />\n                                  Recovery\n                                </h5>\n                                <div className=\"bg-blue-50 border border-blue-200 p-3 rounded-lg\">\n                                  <p className=\"text-xl font-bold text-blue-600\">\n                                    {selectedCycle.recovery_price ? formatPrice(selectedCycle.recovery_price) : 'Ongoing'}\n                                  </p>\n                                  <p className=\"text-xs text-gray-600\">\n                                    {selectedCycle.recovery_date ? formatDate(selectedCycle.recovery_date) : 'Not recovered yet'}\n                                  </p>\n                                </div>\n                              </div>\n\n                              {/* Current Price - Show for all cycles */}\n                              <div className=\"space-y-2\">\n                                <h5 className=\"font-semibold text-gray-900 flex items-center text-sm\">\n                                  <TrendingUp className=\"w-4 h-4 mr-2 text-purple-500\" />\n                                  Current Price\n                                </h5>\n                                <div className=\"bg-purple-50 border border-purple-200 p-3 rounded-lg\">\n                                  <p className=\"text-xl font-bold text-purple-600\">\n                                    ${currentPrice?.toFixed(2) || 'Fetching...'}\n                                  </p>\n                                  {currentPrice && (\n                                    <div className=\"text-xs space-y-1 mt-2\">\n                                      <div className={`flex items-center ${\n                                        currentPrice >= selectedCycle.ath_price ? 'text-green-600' : 'text-red-600'\n                                      }`}>\n                                        <span className=\"mr-1\">\n                                          {currentPrice >= selectedCycle.ath_price ? '↗' : '↘'}\n                                        </span>\n                                        {currentPrice >= selectedCycle.ath_price ? 'Above ATH' : 'Below ATH'}\n                                      </div>\n                                      <div className={`flex items-center ${\n                                        currentPrice >= selectedCycle.low_price ? 'text-green-600' : 'text-red-600'\n                                      }`}>\n                                        <span className=\"mr-1\">\n                                          {currentPrice >= selectedCycle.low_price ? '↗' : '↘'}\n                                        </span>\n                                        {currentPrice >= selectedCycle.low_price ? 'Above Low' : 'Below Low'}\n                                      </div>\n                                      <div className=\"text-xs text-gray-500 mt-1\">\n                                        Last traded: {currentPrice ? 'Available' : 'Fetching...'}\n                                      </div>\n                                    </div>\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n\n                            {/* Timeline and Price Changes */}\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                              {/* Timeline */}\n                              <div className=\"bg-gray-50 border border-gray-200 p-3 rounded-lg\">\n                                <h5 className=\"font-semibold text-gray-900 mb-3 flex items-center text-sm\">\n                                  <Calendar className=\"w-4 h-4 mr-2 text-gray-500\" />\n                                  Timeline\n                                </h5>\n                                <div className=\"space-y-2 text-xs\">\n                                  <div className=\"flex justify-between\">\n                                    <span className=\"text-gray-600\">ATH to Low:</span>\n                                    <span className=\"font-medium\">{calculateDuration(selectedCycle.ath_date, selectedCycle.low_date)} days</span>\n                                  </div>\n                                  {selectedCycle.recovery_date && (\n                                    <>\n                                      <div className=\"flex justify-between\">\n                                        <span className=\"text-gray-600\">Low to Recovery:</span>\n                                        <span className=\"font-medium\">{calculateDuration(selectedCycle.low_date, selectedCycle.recovery_date)} days</span>\n                                      </div>\n                                      <div className=\"flex justify-between border-t pt-2\">\n                                        <span className=\"text-gray-600 font-medium\">Total Cycle:</span>\n                                        <span className=\"font-bold\">{calculateDuration(selectedCycle.ath_date, selectedCycle.recovery_date)} days</span>\n                                      </div>\n                                    </>\n                                  )}\n                                </div>\n                              </div>\n\n                              {/* Price Changes */}\n                              <div className=\"bg-gray-50 border border-gray-200 p-3 rounded-lg\">\n                                <h5 className=\"font-semibold text-gray-900 mb-3 flex items-center text-sm\">\n                                  <TrendingDown className=\"w-4 h-4 mr-2 text-gray-500\" />\n                                  Price Changes\n                                </h5>\n                                <div className=\"space-y-2 text-xs\">\n                                  <div className=\"flex justify-between\">\n                                    <span className=\"text-gray-600\">ATH to Low:</span>\n                                    <span className=\"font-medium text-red-600\">\n                                      {((selectedCycle.low_price - selectedCycle.ath_price) / selectedCycle.ath_price * 100).toFixed(1)}%\n                                    </span>\n                                  </div>\n                                  {selectedCycle.recovery_price && (\n                                    <>\n                                      <div className=\"flex justify-between\">\n                                        <span className=\"text-gray-600\">Low to Recovery:</span>\n                                        <span className=\"font-medium text-green-600\">\n                                          {((selectedCycle.recovery_price - selectedCycle.low_price) / selectedCycle.low_price * 100).toFixed(1)}%\n                                        </span>\n                                      </div>\n                                      <div className=\"flex justify-between border-t pt-2\">\n                                        <span className=\"text-gray-600 font-medium\">Net Change:</span>\n                                        <span className={`font-bold ${\n                                          selectedCycle.recovery_price >= selectedCycle.ath_price ? 'text-green-600' : 'text-red-600'\n                                        }`}>\n                                          {((selectedCycle.recovery_price - selectedCycle.ath_price) / selectedCycle.ath_price * 100).toFixed(1)}%\n                                        </span>\n                                      </div>\n                                    </>\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n\n                            {/* Summary Info */}\n                            <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                              <div className=\"flex items-start\">\n                                <div className=\"flex-shrink-0\">\n                                  <div className={`w-3 h-3 rounded-full mt-1 ${\n                                    selectedCycle.severity === 'severe' ? 'bg-red-500' :\n                                    selectedCycle.severity === 'moderate' ? 'bg-yellow-500' : 'bg-green-500'\n                                  }`}></div>\n                                </div>\n                                <div className=\"ml-3\">\n                                  <p className=\"text-sm font-medium text-blue-900\">\n                                    {selectedCycle.severity.charAt(0).toUpperCase() + selectedCycle.severity.slice(1)} Drawdown Cycle\n                                  </p>\n                                  <p className=\"text-xs text-blue-700 mt-1\">\n                                    This cycle represents a {selectedCycle.drawdown_pct.toFixed(1)}% decline from the all-time high, \n                                    {selectedCycle.recovery_date \n                                      ? ` which took ${calculateDuration(selectedCycle.ath_date, selectedCycle.recovery_date)} days to fully recover.`\n                                      : ' and is currently ongoing without full recovery.'\n                                    }\n                                  </p>\n                                </div>\n                              </div>\n                            </div>\n\n                            {/* Cycle Price Chart */}\n                            {chartData && (\n                              <div className=\"mt-6\">\n                                <h5 className=\"font-semibold text-gray-900 mb-4 flex items-center text-sm\">\n                                  <TrendingUp className=\"w-4 h-4 mr-2 text-blue-500\" />\n                                  Cycle Price Chart\n                                </h5>\n                                <div className=\"bg-white border border-gray-200 rounded-lg p-4\">\n                                  <div className=\"h-80\">\n                                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                                      <ComposedChart data={getCycleChartData()}>\n                                        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                                        <XAxis \n                                          dataKey=\"date\" \n                                          tickFormatter={(value) => formatChartDate(value)}\n                                          tick={{ fontSize: 10 }}\n                                          stroke=\"#6b7280\"\n                                        />\n                                        <YAxis \n                                          tickFormatter={(value) => `$${value.toFixed(0)}`}\n                                          tick={{ fontSize: 10 }}\n                                          stroke=\"#6b7280\"\n                                        />\n                                        <Tooltip \n                                          content={({ active, payload, label }) => {\n                                            if (active && payload && payload.length) {\n                                              const value = payload[0].value;\n                                              const formattedValue = typeof value === 'number' ? value.toFixed(2) : String(value);\n                                              return (\n                                                <div className=\"bg-white p-3 border border-gray-200 rounded-lg shadow-lg\">\n                                                  <p className=\"font-medium text-gray-900\">{formatChartDate(label)}</p>\n                                                  <p className=\"text-blue-600\">{selectedETF}: ${formattedValue}</p>\n                                                </div>\n                                              )\n                                            }\n                                            return null\n                                          }}\n                                        />\n                                        <Area \n                                          type=\"monotone\" \n                                          dataKey=\"close\" \n                                          stroke=\"#2563eb\" \n                                          fill=\"#dbeafe\" \n                                          strokeWidth={2}\n                                          fillOpacity={0.3}\n                                        />\n                                        \n                                        {/* Highlight the current cycle */}\n                                        <ReferenceLine\n                                          x={selectedCycle.ath_date}\n                                          stroke=\"#ef4444\"\n                                          strokeDasharray=\"3 3\"\n                                          strokeWidth={2}\n                                          label={{\n                                            value: `ATH: ${formatChartPrice(selectedCycle.ath_price)}`,\n                                            position: 'top',\n                                            fill: '#ef4444',\n                                            fontSize: 10\n                                          }}\n                                        />\n                                        <ReferenceLine\n                                          x={selectedCycle.low_date}\n                                          stroke=\"#dc2626\"\n                                          strokeDasharray=\"3 3\"\n                                          strokeWidth={2}\n                                          label={{\n                                            value: `Low: ${formatChartPrice(selectedCycle.low_price)}`,\n                                            position: 'bottom',\n                                            fill: '#dc2626',\n                                            fontSize: 10\n                                          }}\n                                        />\n                                        {selectedCycle.recovery_date && (\n                                          <ReferenceLine\n                                            x={selectedCycle.recovery_date}\n                                            stroke=\"#059669\"\n                                            strokeDasharray=\"3 3\"\n                                            strokeWidth={2}\n                                            label={{\n                                              value: `Recovery: ${formatChartPrice(selectedCycle.recovery_price)}`,\n                                              position: 'top',\n                                              fill: '#059669',\n                                              fontSize: 10\n                                            }}\n                                          />\n                                        )}\n                                        \n                                        {/* Highlight the cycle period */}\n                                        <ReferenceArea\n                                          x1={selectedCycle.ath_date}\n                                          x2={selectedCycle.recovery_date || new Date().toISOString().split('T')[0]}\n                                          fill=\"#fef3c7\"\n                                          fillOpacity={0.3}\n                                          stroke=\"none\"\n                                        />\n                                      </ComposedChart>\n                                    </ResponsiveContainer>\n                                  </div>\n                                  <div className=\"mt-3 text-xs text-gray-600 text-center\">\n                                    <span className=\"inline-block w-3 h-3 bg-red-500 rounded-full mr-1\"></span>\n                                    ATH • \n                                    <span className=\"inline-block w-3 h-3 bg-red-600 rounded-full mx-1\"></span>\n                                    Low • \n                                    <span className=\"inline-block w-3 h-3 bg-green-600 rounded-full mx-1\"></span>\n                                    Recovery • \n                                    <span className=\"inline-block w-3 h-3 bg-yellow-200 rounded-full mx-1\"></span>\n                                    Cycle Period\n                                  </div>\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                  </td>\n                </tr>\n                  )}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        {filteredCycles.length === 0 && (\n          <div className=\"text-center py-12\">\n            <TrendingDown className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No cycles found</h3>\n            <p className=\"text-gray-500\">Try adjusting your search or filter criteria.</p>\n          </div>\n        )}\n      </div>\n\n\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react';\nimport { useThreshold } from '../contexts/ThresholdContext';\nimport { useETF } from '../contexts/ETFContext';\nimport { Calculator, DollarSign, TrendingUp, Calendar, RefreshCw, BarChart3, ChevronDown } from 'lucide-react';\n\n// ETF pair interface for simulation\ninterface ETFPair {\n  baseETF: string;\n  leveragedETF: string;\n  description: string;\n  leverageRatio: string;\n}\n\ninterface SimulationResult {\n  startDate: string;\n  endDate: string;\n  initialInvestment: number;\n  monthlyInvestment?: number;\n  totalInvested?: number;\n  strategy: string;\n  \n  // Dynamic results based on selected symbols\n  baseETFFinalValue?: number;\n  baseETFTotalReturn?: number;\n  baseETFTotalReturnPct?: number;\n  baseETFAnnualizedReturn?: number;\n  \n  leveragedETFFinalValue?: number;\n  leveragedETFTotalReturn?: number;\n  leveragedETFTotalReturnPct?: number;\n  leveragedETFAnnualizedReturn?: number;\n  \n  // Legacy field names for backward compatibility\n  qqqFinalValue?: number;\n  qqqTotalReturn?: number;\n  qqqTotalReturnPct?: number;\n  qqqAnnualizedReturn?: number;\n  \n  tqqqFinalValue?: number;\n  tqqqTotalReturn?: number;\n  tqqqTotalReturnPct?: number;\n  tqqqAnnualizedReturn?: number;\n  \n  // Strategy results (baseETF with leveragedETF during drawdowns)\n  strategyFinalValue?: number;\n  strategyTotalReturn?: number;\n  strategyTotalReturnPct?: number;\n  strategyAnnualizedReturn?: number;\n  strategySwitches?: number;\n  \n  // Additional metrics\n  durationDays: number;\n  durationYears: number;\n}\n\ninterface SimulationProps {\n  selectedSymbol?: string;\n}\n\nconst Simulation: React.FC<SimulationProps> = ({ selectedSymbol }) => {\n  const { threshold, setThreshold, availableThresholds } = useThreshold();\n  const { selectedETF, availableETFs, isLoading: etfLoading } = useETF();\n  \n  const [selectedETFPair, setSelectedETFPair] = useState<ETFPair>({\n    baseETF: selectedSymbol || '',\n    leveragedETF: '',\n    description: '',\n    leverageRatio: 'Custom'\n  });\n  const [availableETFPairs, setAvailableETFPairs] = useState<ETFPair[]>([]);\n  const [investmentAmount, setInvestmentAmount] = useState<number>(10000);\n  const [startDate, setStartDate] = useState<string>('2020-01-01');\n  const [endDate, setEndDate] = useState<string>(new Date().toISOString().split('T')[0]);\n  const [simulationResult, setSimulationResult] = useState<SimulationResult | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [showSymbolSelector, setShowSymbolSelector] = useState(false);\n  const [symbolSearchTerm, setSymbolSearchTerm] = useState('');\n\n  const [monthlyInvestment, setMonthlyInvestment] = useState<number>(1000);\n  const [useMonthlyInvestment, setUseMonthlyInvestment] = useState(true);\n  \n  // State for smart strategy options (only shown after initial simulation)\n  const [showSmartStrategyOptions, setShowSmartStrategyOptions] = useState(false);\n  const [smartStrategyThreshold, setSmartStrategyThreshold] = useState<number>(5);\n  const [secondarySymbol, setSecondarySymbol] = useState<string>('');\n  \n  // State for dropdown visibility\n  const [showBaseSuggestions, setShowBaseSuggestions] = useState(false);\n  const [showSecondarySuggestions, setShowSecondarySuggestions] = useState(false);\n\n  // Fetch available ETF pairs for simulation\n  useEffect(() => {\n    const fetchETFPairs = async () => {\n      try {\n        const response = await fetch('/api/available-etfs');\n        if (response.ok) {\n          const data = await response.json();\n          setAvailableETFPairs(data.etfPairs || []);\n        }\n      } catch (error) {\n        console.error('Failed to fetch ETF pairs:', error);\n      }\n    };\n    fetchETFPairs();\n  }, []);\n\n  // Update selectedETFPair when selectedSymbol prop changes\n  useEffect(() => {\n    if (selectedSymbol && selectedSymbol !== selectedETFPair.baseETF) {\n      console.log(`🔄 Setting base ETF to ${selectedSymbol} from Dashboard`)\n      setSelectedETFPair(prev => ({\n        ...prev,\n        baseETF: selectedSymbol,\n        leveragedETF: '', // Clear leveragedETF when symbol changes\n        description: '',\n        leverageRatio: 'Custom'\n      }))\n      // Clear any previous errors when symbol changes\n      setError(null)\n      setSimulationResult(null)\n      setSecondarySymbol('') // Also clear secondary symbol\n      \n      // Auto-set date range to last 5 years for Dashboard integration\n      const today = new Date();\n      const fiveYearsAgo = new Date(today.getFullYear() - 5, today.getMonth(), today.getDate());\n      setStartDate(fiveYearsAgo.toISOString().split('T')[0]);\n      setEndDate(today.toISOString().split('T')[0]);\n      \n      console.log(`🧹 Cleared all states for new symbol: ${selectedSymbol}`)\n      console.log(`📅 Auto-set date range: ${fiveYearsAgo.toISOString().split('T')[0]} to ${today.toISOString().split('T')[0]}`)\n    }\n  }, [selectedSymbol, selectedETFPair.baseETF])\n\n  // Auto-run simulation when coming from Dashboard with autoRun parameter\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.hash.split('?')[1]);\n    const autoRun = urlParams.get('autoRun');\n    \n    if (autoRun === 'true' && selectedSymbol && !isLoading && !simulationResult) {\n      console.log(`🚀 Auto-running simulation for ${selectedSymbol} from Dashboard`);\n      \n      // Set date range to last 5 years\n      const today = new Date();\n      const fiveYearsAgo = new Date(today.getFullYear() - 5, today.getMonth(), today.getDate());\n      \n      setStartDate(fiveYearsAgo.toISOString().split('T')[0]);\n      setEndDate(today.toISOString().split('T')[0]);\n      \n      // Auto-run the simulation after a short delay to ensure state is set\n      setTimeout(() => {\n        runSimulation();\n      }, 500);\n    }\n  }, [selectedSymbol, isLoading, simulationResult])\n\n  // Auto-generate ETF pairs from available symbols\n  useEffect(() => {\n    if (availableETFs.length > 0) {\n      const generatedPairs: ETFPair[] = [];\n      \n      // Create pairs for known leveraged relationships\n      const knownLeveraged = {\n        'QQQ': 'TQQQ',\n        'SPY': 'UPRO', \n        'IWM': 'TNA'\n      };\n      \n      availableETFs.forEach(etf => {\n        if (knownLeveraged[etf.symbol as keyof typeof knownLeveraged]) {\n          const leveraged = knownLeveraged[etf.symbol as keyof typeof knownLeveraged];\n          if (availableETFs.some(e => e.symbol === leveraged)) {\n            generatedPairs.push({\n              baseETF: etf.symbol,\n              leveragedETF: leveraged,\n              description: `${etf.name} vs 3x Leveraged`,\n              leverageRatio: '3x'\n            });\n          }\n        }\n      });\n      \n      // Add custom pairs for any two symbols\n      if (availableETFs.length >= 2) {\n        availableETFs.forEach((etf1, i) => {\n          availableETFs.slice(i + 1).forEach(etf2 => {\n            generatedPairs.push({\n              baseETF: etf1.symbol,\n              leveragedETF: etf2.symbol,\n              description: `${etf1.symbol} vs ${etf2.symbol}`,\n              leverageRatio: 'Custom'\n            });\n          });\n        });\n      }\n      \n      setAvailableETFPairs(generatedPairs);\n    }\n  }, [availableETFs]);\n\n  const runSimulation = async () => {\n    if (!investmentAmount || !startDate || !endDate) {\n      setError('Please fill in all required fields');\n      return;\n    }\n    \n    if (!selectedETFPair.baseETF) {\n      setError('Please select a base symbol');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    console.log(`🚀 Starting simulation for ${selectedETFPair.baseETF}`);\n\n    try {\n      // For initial simulation, use the same logic as smart strategy but with same symbol\n      // This ensures consistency and accuracy in calculations\n      console.log(`📡 Running initial simulation using /api/simulate for ${selectedETFPair.baseETF}`);\n      const response = await fetch('/api/simulate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          amount: investmentAmount,\n          startDate,\n          endDate,\n          threshold: 5, // Default threshold for initial simulation\n          monthlyInvestment: useMonthlyInvestment ? monthlyInvestment : 0,\n          baseETF: selectedETFPair.baseETF,\n          leveragedETF: selectedETFPair.baseETF // Use same symbol for baseline performance\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Initial simulation failed');\n      }\n\n      const result = await response.json();\n      \n      // Transform the result to match our expected format for initial simulation\n      const transformedResult = {\n        startDate,\n        endDate,\n        initialInvestment: investmentAmount,\n        monthlyInvestment: useMonthlyInvestment ? monthlyInvestment : undefined,\n        totalInvested: result.totalInvested || result.initialInvestment,\n        strategy: `Buy and Hold ${selectedETFPair.baseETF}`,\n        baseETFFinalValue: result.baseETFFinalValue || result.qqqFinalValue || 0,\n        baseETFTotalReturn: (result.baseETFFinalValue || result.qqqFinalValue || 0) - (result.totalInvested || result.initialInvestment),\n        baseETFTotalReturnPct: result.baseETFTotalReturnPct || result.qqqTotalReturnPct || 0,\n        baseETFAnnualizedReturn: result.baseETFAnnualizedReturn || result.qqqAnnualizedReturn || 0,\n        durationDays: result.durationDays || 0,\n        durationYears: result.durationYears || 0,\n        strategySwitches: 0\n      };\n      \n      setSimulationResult(transformedResult);\n      console.log('Initial simulation result (using smart strategy logic):', transformedResult);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Simulation failed';\n      console.log(`❌ Setting error: ${errorMessage}`);\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Run smart strategy function\n  const runSmartStrategy = async () => {\n    if (!selectedETFPair.baseETF || !secondarySymbol) {\n      setError('Please select both base and secondary symbols');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('/api/simulate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          amount: investmentAmount,\n          startDate,\n          endDate,\n          threshold: smartStrategyThreshold,\n          monthlyInvestment: useMonthlyInvestment ? monthlyInvestment : 0,\n          baseETF: selectedETFPair.baseETF,\n          leveragedETF: secondarySymbol\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Smart strategy simulation failed');\n      }\n\n      const result = await response.json();\n      setSimulationResult(result);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Smart strategy simulation failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2,\n    }).format(value);\n  };\n\n  const formatPercent = (value: number) => {\n    return `${value >= 0 ? '+' : ''}${value.toFixed(2)}%`;\n  };\n\n  const formatPercentShort = (value: number) => {\n    return `${value >= 0 ? '+' : ''}${value.toFixed(1)}%`;\n  };\n\n  const getReturnColor = (value: number) => {\n    return value >= 0 ? 'text-green-600' : 'text-red-600';\n  };\n\n  const getReturnBgColor = (value: number) => {\n    return value >= 0 ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200';\n  };\n\n  const handleETFPairChange = (baseETF: string, leveragedETF: string) => {\n    const pair = availableETFPairs.find(p => \n      p.baseETF === baseETF && p.leveragedETF === leveragedETF\n    );\n    if (pair) {\n      setSelectedETFPair(pair);\n    }\n  };\n\n  // Show loading state while ETFs are being fetched\n  if (etfLoading || availableETFs.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 py-8\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center py-12\">\n            <RefreshCw className=\"w-16 h-16 text-gray-400 mx-auto mb-4 animate-spin\" />\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Loading Simulation...</h2>\n            <p className=\"text-gray-600\">Please wait while we load available symbols.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Portfolio Simulation - {selectedSymbol}</h2>\n        <p className=\"text-gray-600\">\n          Compare different investment strategies and see how they would have performed historically.\n        </p>\n      </div>\n\n        <div className=\"grid grid-cols-1 xl:grid-cols-5 gap-4 lg:gap-6\">\n          {/* Simulation Controls */}\n          <div className=\"xl:col-span-2\">\n            <div className=\"bg-gray-50 rounded-lg shadow-sm border border-gray-200 p-4\">\n              <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Simulation Parameters</h2>\n              \n              {/* ETF Pair Selection */}\n              <div className=\"mb-6\">\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Smart Strategy Symbols\n                </label>\n                <div className=\"space-y-3\">\n\n\n                  {/* Base Symbol Selection */}\n                  <div>\n                    <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                      Base Symbol (Primary)\n                    </label>\n                    <div className=\"relative\">\n                      <input\n                        type=\"text\"\n                        value={selectedETFPair.baseETF}\n                        onChange={(e) => {\n                          const newBase = e.target.value;\n                          setSelectedETFPair({\n                            ...selectedETFPair,\n                            baseETF: newBase,\n                            description: `${newBase} vs ${selectedETFPair.leveragedETF}`,\n                            leverageRatio: 'Custom'\n                          });\n                          setShowBaseSuggestions(newBase.length > 0);\n                          setSimulationResult(null);\n                        }}\n                        onFocus={() => setShowBaseSuggestions(selectedETFPair.baseETF.length > 0)}\n                        onBlur={() => setTimeout(() => setShowBaseSuggestions(false), 200)}\n                        onKeyPress={(e) => {\n                          if (e.key === 'Enter') {\n                            setShowBaseSuggestions(false);\n                          }\n                        }}\n                        placeholder=\"Type symbol (e.g., QQQ, AAPL, TSLA)...\"\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm\"\n                      />\n                      \n                      {/* Autocomplete Suggestions */}\n                      {showBaseSuggestions && selectedETFPair.baseETF && (\n                        <div className=\"absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-auto\">\n                          {availableETFs\n                            .filter(etf => \n                              etf.symbol.toLowerCase().includes(selectedETFPair.baseETF.toLowerCase()) ||\n                              etf.name.toLowerCase().includes(selectedETFPair.baseETF.toLowerCase())\n                            )\n                            .slice(0, 10) // Limit to 10 suggestions\n                            .map((etf) => (\n                              <div\n                                key={etf.symbol}\n                                onClick={() => {\n                                  setSelectedETFPair({\n                                    ...selectedETFPair,\n                                    baseETF: etf.symbol,\n                                    description: `${etf.symbol} vs ${selectedETFPair.leveragedETF}`,\n                                    leverageRatio: 'Custom'\n                                  });\n                                  setShowBaseSuggestions(false);\n                                  setSimulationResult(null);\n                                }}\n                                className=\"px-3 py-2 hover:bg-gray-100 cursor-pointer text-sm border-b border-gray-100 last:border-b-0\"\n                              >\n                                <div className=\"font-medium text-gray-900\">{etf.symbol}</div>\n                                <div className=\"text-xs text-gray-500\">{etf.name}</div>\n                              </div>\n                            ))}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Current Selection Info */}\n                  {selectedETFPair.baseETF && (\n                    <div className=\"p-2 bg-gray-50 rounded border border-gray-200\">\n                      <p className=\"text-xs text-gray-600\">\n                        <span className=\"font-medium\">Symbol:</span> {selectedETFPair.baseETF}\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        Ready to simulate performance\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Investment Amount */}\n              <div className=\"mb-6\">\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Initial Investment\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <DollarSign className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"number\"\n                    value={investmentAmount}\n                    onChange={(e) => setInvestmentAmount(Number(e.target.value))}\n                    className=\"block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"10000\"\n                    min=\"100\"\n                    step=\"100\"\n                  />\n                </div>\n              </div>\n\n              {/* Date Range */}\n              <div className=\"mb-6\">\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Date Range\n                </label>\n                <div className=\"space-y-2\">\n                  <input\n                    type=\"date\"\n                    value={startDate}\n                    onChange={(e) => setStartDate(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  />\n                  <input\n                    type=\"date\"\n                    value={endDate}\n                    onChange={(e) => setEndDate(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  />\n                </div>\n              </div>\n\n\n\n              {/* Monthly Investment */}\n              <div className=\"mb-6\">\n                <div className=\"flex items-center mb-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"monthlyInvestment\"\n                    checked={useMonthlyInvestment}\n                    onChange={(e) => setUseMonthlyInvestment(e.target.checked)}\n                    className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                  />\n                  <label htmlFor=\"monthlyInvestment\" className=\"ml-2 text-sm font-medium text-gray-700\">\n                    Add Monthly Investment\n                  </label>\n                </div>\n                {useMonthlyInvestment && (\n                  <div className=\"relative\">\n                    <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                      <DollarSign className=\"h-5 w-5 text-gray-400\" />\n                    </div>\n                    <input\n                      type=\"number\"\n                      value={monthlyInvestment}\n                      onChange={(e) => setMonthlyInvestment(Number(e.target.value))}\n                      className=\"block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                      placeholder=\"1000\"\n                      min=\"100\"\n                      step=\"100\"\n                    />\n                  </div>\n                )}\n              </div>\n\n              {/* Run Simulation Button */}\n              <button\n                onClick={runSimulation}\n                disabled={isLoading}\n                className=\"w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center\"\n              >\n                {isLoading ? (\n                  <>\n                    <RefreshCw className=\"animate-spin -ml-1 mr-2 h-4 w-4\" />\n                    Running...\n                  </>\n                ) : (\n                  <>\n                    <Calculator className=\"-ml-1 mr-2 h-4 w-4\" />\n                    Run Simulation\n                  </>\n                )}\n              </button>\n\n              {error && (\n                <div className=\"mt-4 p-3 bg-red-50 border border-red-200 rounded-md\">\n                  <p className=\"text-sm text-red-600\">{error}</p>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Simulation Results */}\n          <div className=\"xl:col-span-3\">\n            {simulationResult ? (\n              <div className=\"space-y-6\">\n                {/* Results Summary */}\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 lg:gap-4\">\n                  {/* Base ETF Only */}\n                  <div className={`bg-gray-50 rounded-lg shadow-sm border border-gray-200 p-3 lg:p-4 min-w-0 min-h-[140px] ${getReturnBgColor(simulationResult.baseETFFinalValue ? (simulationResult.baseETFTotalReturnPct || 0) : 0)}`}>\n                    <div className=\"text-center min-w-0 h-full flex flex-col justify-center\">\n                      <h4 className=\"text-xs lg:text-sm font-medium text-gray-600 mb-2 truncate\">{selectedETFPair.baseETF} Only</h4>\n                      <p className=\"text-base lg:text-lg xl:text-xl font-bold text-gray-900 mb-1 break-words leading-tight min-h-[2.5rem] flex items-center justify-center\">\n                        {formatCurrency(simulationResult.baseETFFinalValue || simulationResult.qqqFinalValue || 0)}\n                      </p>\n                      <p className={`text-xs lg:text-sm font-medium ${getReturnColor(simulationResult.baseETFTotalReturnPct || simulationResult.qqqTotalReturnPct || 0)} min-h-[1.5rem] flex items-center justify-center`}>\n                        {formatPercent(simulationResult.baseETFTotalReturnPct || simulationResult.qqqTotalReturnPct || 0)}\n                      </p>\n                      <p className=\"text-xs text-gray-500 mt-1 break-words min-h-[1rem] flex items-center justify-center\">\n                        {formatPercentShort(simulationResult.baseETFAnnualizedReturn || simulationResult.qqqAnnualizedReturn || 0)} annually\n                      </p>\n                    </div>\n                  </div>\n\n                  {/* Leveraged ETF Only */}\n                  <div className={`bg-gray-50 rounded-lg shadow-sm border border-gray-200 p-3 lg:p-4 min-w-0 min-h-[140px] ${getReturnBgColor(simulationResult.leveragedETFFinalValue ? (simulationResult.leveragedETFTotalReturnPct || 0) : 0)}`}>\n                    <div className=\"text-center min-w-0 h-full flex flex-col justify-center\">\n                      <h4 className=\"text-xs lg:text-sm font-medium text-gray-600 mb-2 truncate\">{selectedETFPair.leveragedETF} Only</h4>\n                      <p className=\"text-base lg:text-lg xl:text-xl font-bold text-gray-900 mb-1 break-words leading-tight min-h-[2.5rem] flex items-center justify-center\">\n                        {formatCurrency(simulationResult.leveragedETFFinalValue || simulationResult.tqqqFinalValue || 0)}\n                      </p>\n                      <p className={`text-xs lg:text-sm font-medium ${getReturnColor(simulationResult.leveragedETFTotalReturnPct || simulationResult.tqqqTotalReturnPct || 0)} min-h-[1.5rem] flex items-center justify-center`}>\n                        {formatPercent(simulationResult.leveragedETFTotalReturnPct || simulationResult.tqqqTotalReturnPct || 0)}\n                      </p>\n                      <p className=\"text-xs text-gray-500 mt-1 break-words min-h-[1rem] flex items-center justify-center\">\n                        {formatPercentShort(simulationResult.leveragedETFAnnualizedReturn || simulationResult.tqqqAnnualizedReturn || 0)} annually\n                      </p>\n                    </div>\n                  </div>\n\n                  {/* Strategy */}\n                  {simulationResult.strategyFinalValue && (\n                    <div className={`bg-gray-50 rounded-lg shadow-sm border border-gray-200 p-3 lg:p-4 min-w-0 min-h-[140px] ${getReturnBgColor(simulationResult.strategyTotalReturnPct || 0)}`}>\n                      <div className=\"text-center min-w-0 h-full flex flex-col justify-center\">\n                        <h4 className=\"text-xs lg:text-sm font-medium text-gray-600 mb-2 truncate\">Smart Strategy</h4>\n                        <p className=\"text-base lg:text-lg xl:text-xl font-bold text-gray-900 mb-1 break-words leading-tight min-h-[2.5rem] flex items-center justify-center\">\n                          {formatCurrency(simulationResult.strategyFinalValue)}\n                        </p>\n                        <p className={`text-xs lg:text-sm font-medium ${getReturnColor(simulationResult.strategyTotalReturnPct || 0)} min-h-[1.5rem] flex items-center justify-center`}>\n                          {formatPercent(simulationResult.strategyTotalReturnPct || 0)}\n                        </p>\n                        <p className=\"text-xs text-gray-500 mt-1 break-words min-h-[1rem] flex items-center justify-center\">\n                          {simulationResult.strategySwitches} switches\n                        </p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {/* Detailed Results */}\n                <div className=\"bg-gray-50 rounded-lg shadow-sm border border-gray-200 p-3 lg:p-4\">\n                  <h3 className=\"text-base lg:text-lg font-semibold text-gray-900 mb-3 lg:mb-4\">Detailed Results</h3>\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 lg:gap-6\">\n                    <div className=\"min-w-0\">\n                      <h4 className=\"font-medium text-gray-700 mb-2 lg:mb-3 text-sm lg:text-base\">Investment Summary</h4>\n                      <div className=\"space-y-2 text-xs lg:text-sm\">\n                        <div className=\"flex justify-between items-center min-w-0\">\n                          <span className=\"truncate mr-2\">Initial Investment:</span>\n                          <span className=\"font-medium text-right break-words\">{formatCurrency(simulationResult.initialInvestment)}</span>\n                        </div>\n                        {simulationResult.monthlyInvestment && (\n                          <div className=\"flex justify-between items-center min-w-0\">\n                            <span className=\"truncate mr-2\">Monthly Investment:</span>\n                            <span className=\"font-medium text-right break-words\">{formatCurrency(simulationResult.monthlyInvestment)}</span>\n                          </div>\n                        )}\n                        <div className=\"flex justify-between items-center min-w-0\">\n                          <span className=\"truncate mr-2\">Total Invested:</span>\n                          <span className=\"font-medium text-right break-words\">{formatCurrency(simulationResult.totalInvested || simulationResult.initialInvestment)}</span>\n                        </div>\n                        <div className=\"flex justify-between items-center min-w-0\">\n                          <span className=\"truncate mr-2\">Duration:</span>\n                          <span className=\"font-medium text-right break-words\">{(simulationResult.durationYears || 0).toFixed(1)} years</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"min-w-0\">\n                      <h4 className=\"font-medium text-gray-700 mb-2 lg:mb-3 text-sm lg:text-base\">Strategy Details</h4>\n                      <div className=\"space-y-2 text-xs lg:text-sm\">\n                        <div className=\"flex justify-between items-center min-w-0\">\n                          <span className=\"truncate mr-2\">Strategy:</span>\n                          <span className=\"font-medium text-blue-600 text-right break-words\">{simulationResult.strategy}</span>\n                        </div>\n                        <div className=\"flex justify-between items-center min-w-0\">\n                          <span className=\"truncate mr-2\">Switches:</span>\n                          <span className=\"font-medium\">{simulationResult.strategySwitches || 0}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Threshold:</span>\n                          <span className=\"font-medium\">{threshold}%</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Smart Strategy Options */}\n                <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Smart Strategy Options</h3>\n                  <p className=\"text-sm text-gray-600 mb-4\">\n                    Configure smart switching strategy parameters to see how switching between symbols during drawdowns affects returns.\n                  </p>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    {/* Secondary Symbol Selection */}\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Secondary Symbol (Switch Target)\n                      </label>\n                      <div className=\"relative\">\n                        <input\n                          type=\"text\"\n                          value={secondarySymbol}\n                          onChange={(e) => {\n                            setSecondarySymbol(e.target.value);\n                            setShowSecondarySuggestions(e.target.value.length > 0);\n                          }}\n                          onFocus={() => setShowSecondarySuggestions(secondarySymbol.length > 0)}\n                          onBlur={() => setTimeout(() => setShowSecondarySuggestions(false), 200)}\n                          onKeyPress={(e) => {\n                            if (e.key === 'Enter') {\n                              setShowSecondarySuggestions(false);\n                            }\n                          }}\n                          placeholder=\"Type symbol (e.g., QQQ, AAPL, TSLA)...\"\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                        />\n                        \n                        {/* Autocomplete Suggestions */}\n                        {showSecondarySuggestions && secondarySymbol && (\n                          <div className=\"absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-auto\">\n                            {availableETFs\n                              .filter(etf => \n                                etf.symbol.toLowerCase().includes(secondarySymbol.toLowerCase()) ||\n                                etf.name.toLowerCase().includes(secondarySymbol.toLowerCase())\n                              )\n                              .slice(0, 10)\n                              .map((etf) => (\n                                <div\n                                  key={etf.symbol}\n                                  onClick={() => {\n                                    setSecondarySymbol(etf.symbol);\n                                    setShowSecondarySuggestions(false);\n                                  }}\n                                  className=\"px-3 py-2 hover:bg-gray-100 cursor-pointer text-sm border-b border-gray-100 last:border-b-0\"\n                                >\n                                  <div className=\"font-medium text-gray-900\">{etf.symbol}</div>\n                                  <div className=\"text-xs text-gray-500\">{etf.name}</div>\n                                </div>\n                              ))}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Drawdown Threshold */}\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Drawdown Threshold\n                      </label>\n                      <select\n                        value={smartStrategyThreshold}\n                        onChange={(e) => setSmartStrategyThreshold(Number(e.target.value))}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                      >\n                        {availableThresholds.map((t) => (\n                          <option key={t.value} value={t.value}>\n                            {t.label}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                  </div>\n\n                  {/* Run Smart Strategy Button */}\n                  {secondarySymbol && (\n                    <div className=\"mt-6\">\n                      <button\n                        onClick={() => runSmartStrategy()}\n                        disabled={isLoading}\n                        className=\"w-full bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center\"\n                      >\n                        {isLoading ? (\n                          <>\n                            <RefreshCw className=\"animate-spin -ml-1 mr-2 h-4 w-4\" />\n                            Running Smart Strategy...\n                          </>\n                        ) : (\n                          <>\n                            <TrendingUp className=\"-ml-1 mr-2 h-4 w-4\" />\n                            Run Smart Strategy: {selectedETFPair.baseETF} ↔ {secondarySymbol}\n                          </>\n                        )}\n                      </button>\n                    </div>\n                  )}\n                </div>\n\n                {/* Strategy Explanation */}\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6\">\n                  <h3 className=\"text-lg font-semibold text-blue-900 mb-3\">Strategy Explanation</h3>\n                  <div className=\"text-sm text-blue-800 space-y-2\">\n                    <p>\n                      <strong>Smart Strategy:</strong> Start with {selectedETFPair.baseETF}, switch to {secondarySymbol || 'secondary symbol'} when {selectedETFPair.baseETF} drops {smartStrategyThreshold}%+ from its all-time high, \n                      then switch back to {selectedETFPair.baseETF} when {selectedETFPair.baseETF} recovers to a new all-time high.\n                    </p>\n                    <p>\n                      <strong>Rationale:</strong> {secondarySymbol || 'Secondary symbol'}'s leverage amplifies both gains and losses. During major drawdowns, \n                      the strategy aims to capture {secondarySymbol || 'secondary symbol'}'s amplified recovery while avoiding prolonged exposure to leverage decay.\n                    </p>\n                    <p className=\"text-xs text-blue-600\">\n                      Period: {simulationResult.startDate} to {simulationResult.endDate} \n                      ({(simulationResult.durationYears || 0).toFixed(1)} years)\n                    </p>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"bg-gray-50 rounded-lg shadow-sm border border-gray-200 p-4 text-center py-8\">\n                <TrendingUp className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Ready to Simulate</h3>\n                <p className=\"text-gray-600 mb-4\">\n                  Enter your investment parameters and click \"Run Simulation\" to see how different strategies would have performed.\n                </p>\n                <div className=\"text-sm text-gray-500 space-y-1\">\n                  {selectedETFPair.baseETF ? (\n                    <p>• Simulate {selectedETFPair.baseETF} performance</p>\n                  ) : (\n                    <p>• Select a symbol to simulate performance</p>\n                  )}\n                  <p>• Configure smart switching strategies after initial simulation</p>\n                  <p>• See detailed return calculations</p>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n  );\n};\n\nexport default Simulation;\n","import React, { useState, useEffect } from 'react'\nimport { Search, TrendingUp, TrendingDown, BarChart3 } from 'lucide-react'\nimport { useETF } from '../contexts/ETFContext'\nimport { useThreshold } from '../contexts/ThresholdContext'\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, AreaChart, Area, BarChart, Bar } from 'recharts'\nimport Cycles from './Cycles'\nimport Simulation from './Simulation'\n\n\ninterface NASDAQSymbol {\n  symbol: string\n  name: string\n  sector?: string\n  marketCap?: string\n  exchange?: string\n  isActive?: boolean\n}\n\ninterface ChartDataPoint {\n  date: string\n  close: number\n}\n\ninterface StockInfo {\n  name: string\n  currentPrice: number\n  change: number\n  changePercent: number\n  volume: number\n  dataPoints: number\n  dateRange: string\n}\n\n\n\nexport default function Dashboard() {\n  const { selectedETF, setSelectedETF } = useETF()\n  const { threshold, setThreshold } = useThreshold()\n  const [selectedSymbol, setSelectedSymbol] = useState('')\n  const [chartData, setChartData] = useState<ChartDataPoint[]>([])\n  const [stockInfo, setStockInfo] = useState<StockInfo | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [showSymbolSuggestions, setShowSymbolSuggestions] = useState(false)\n  const [symbolSearchTerm, setSymbolSearchTerm] = useState('')\n  const [selectedDateRange, setSelectedDateRange] = useState('1Y')\n  const [searchResults, setSearchResults] = useState<NASDAQSymbol[]>([])\n  \n\n\n  const dateRanges = [\n    { value: '1M', label: '1 Month' },\n    { value: '3M', label: '3 Months' },\n    { value: '6M', label: '6 Months' },\n    { value: '1Y', label: '1 Year' },\n    { value: '2Y', label: '2 Years' },\n    { value: '5Y', label: '5 Years' },\n    { value: 'MAX', label: 'Max' }\n  ]\n\n\n\n\n\n  // Handle symbol selection\n  const handleSymbolSelect = (symbol: string) => {\n    setSelectedSymbol(symbol)\n    setSelectedETF(symbol)\n    setShowSymbolSuggestions(false)\n    setSymbolSearchTerm('')\n  }\n\n  // Search for symbols\n  const searchSymbols = async (query: string) => {\n    if (query.length < 2) {\n      setSearchResults([])\n      return\n    }\n\n    console.log(`🔍 Searching for symbols: \"${query}\"`)\n    \n    try {\n      const response = await fetch(`/api/symbols?query=${encodeURIComponent(query)}&limit=20`)\n      console.log(`📡 API response status: ${response.status}`)\n      \n      if (response.ok) {\n        const data = await response.json()\n        console.log(`📊 API response data:`, data)\n        \n        if (data.status === 'success' && Array.isArray(data.symbols)) {\n          console.log(`✅ Found ${data.symbols.length} symbols`)\n          setSearchResults(data.symbols)\n        } else {\n          console.warn('⚠️ API returned unexpected data format:', data)\n          setSearchResults([])\n        }\n      } else {\n        console.warn(`⚠️ API request failed: ${response.status}`)\n        setSearchResults([])\n      }\n    } catch (error) {\n      console.error('❌ Error searching symbols:', error)\n      setSearchResults([])\n    }\n  }\n\n  // Debounced search\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (symbolSearchTerm) {\n        searchSymbols(symbolSearchTerm)\n      }\n    }, 300)\n\n    return () => clearTimeout(timeoutId)\n  }, [symbolSearchTerm])\n\n  // Fetch chart data\n  const fetchChartData = async () => {\n    if (!selectedSymbol) return\n    \n    setIsLoading(true)\n    setError(null)\n    \n    try {\n      const response = await fetch(`/api/chart-data/${threshold}/${selectedSymbol}`)\n      if (!response.ok) {\n        throw new Error(`Failed to fetch data for ${selectedSymbol}`)\n      }\n      \n      const data = await response.json()\n      if (data.data && Array.isArray(data.data)) {\n        setChartData(data.data)\n        \n        // Extract stock info from the data\n        if (data.data.length > 0) {\n          const latest = data.data[data.data.length - 1]\n          const earliest = data.data[0]\n          const change = latest.close - earliest.close\n          const changePercent = (change / earliest.close) * 100\n          \n          setStockInfo({\n            name: data.name || selectedSymbol,\n            currentPrice: latest.close,\n            change: change,\n            changePercent: changePercent,\n            volume: latest.volume || 0,\n            dataPoints: data.data.length,\n            dateRange: `${new Date(earliest.date).toLocaleDateString()} - ${new Date(latest.date).toLocaleDateString()}`\n          })\n        }\n      } else {\n        setChartData([])\n        setStockInfo(null)\n      }\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Failed to fetch data')\n      setChartData([])\n      setStockInfo(null)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  // Fetch data when symbol changes\n  useEffect(() => {\n    if (selectedSymbol) {\n      fetchChartData()\n    }\n  }, [selectedSymbol, threshold])\n\n\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Main Content */}\n      <div className=\"w-full max-w-none px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Stock Analysis Dashboard</h1>\n          <p className=\"text-gray-600\">Analyze stock performance, cycles, and simulate investment strategies</p>\n        </div>\n\n        {/* Symbol Search */}\n        <div className=\"bg-white rounded-2xl border border-gray-100 p-6 shadow-xl mb-8\">\n          <div className=\"max-w-md\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Search Stock Symbol\n            </label>\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n              <input\n                type=\"text\"\n                value={symbolSearchTerm}\n                onChange={(e) => setSymbolSearchTerm(e.target.value)}\n                onFocus={() => setShowSymbolSuggestions(true)}\n                onBlur={() => setTimeout(() => setShowSymbolSuggestions(false), 200)}\n                onKeyPress={(e) => {\n                  if (e.key === 'Enter') {\n                    if (searchResults.length > 0) {\n                      handleSymbolSelect(searchResults[0].symbol)\n                    } else if (symbolSearchTerm.trim()) {\n                      // Allow direct symbol entry even if no suggestions\n                      handleSymbolSelect(symbolSearchTerm.trim().toUpperCase())\n                    }\n                  }\n                }}\n                placeholder=\"Enter symbol (e.g., QQQ, AAPL)\"\n                className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              />\n              \n              {/* Symbol Suggestions */}\n              {showSymbolSuggestions && symbolSearchTerm.length >= 2 && (\n                <div className=\"absolute z-10 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-y-auto\">\n                  {searchResults.length > 0 ? (\n                    searchResults.map((symbol) => (\n                      <div\n                        key={symbol.symbol}\n                        onClick={() => handleSymbolSelect(symbol.symbol)}\n                        className=\"px-4 py-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100 last:border-b-0\"\n                      >\n                        <div className=\"font-medium text-gray-900\">{symbol.symbol}</div>\n                        <div className=\"text-sm text-gray-600\">{symbol.name}</div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"px-4 py-3 text-gray-500 text-center\">\n                      {searchResults.length === 0 && symbolSearchTerm.length >= 2 ? 'No symbols found' : 'Type to search...'}\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Chart and Simulation Section - Side by Side */}\n        {selectedSymbol && (\n          <div className=\"grid grid-cols-1 xl:grid-cols-5 gap-6 mb-8\">\n            {/* Chart Section - Takes 3/5 of the width */}\n            <div className=\"xl:col-span-3 bg-white rounded-2xl border border-gray-100 p-6 shadow-xl\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div>\n                  <h2 className=\"text-2xl font-bold text-gray-900\">{selectedSymbol} Price Chart</h2>\n                  {stockInfo && (\n                    <div className=\"flex items-center space-x-4 mt-2\">\n                      <span className=\"text-2xl font-bold text-gray-900\">${stockInfo.currentPrice.toFixed(2)}</span>\n                      <span className={`px-2 py-1 rounded-full text-sm font-medium ${\n                        stockInfo.change >= 0 ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                      }`}>\n                        {stockInfo.change >= 0 ? '+' : ''}{stockInfo.change.toFixed(2)} ({stockInfo.changePercent.toFixed(2)}%)\n                      </span>\n                    </div>\n                  )}\n                </div>\n                \n                {/* Date Range Selector */}\n                <div className=\"flex items-center space-x-2 bg-gray-100 p-1 rounded-lg\">\n                  {dateRanges.map((range) => (\n                    <button\n                      key={range.value}\n                      onClick={() => setSelectedDateRange(range.value)}\n                      className={`px-3 py-2 text-sm font-medium rounded-lg transition-all duration-200 ${\n                        selectedDateRange === range.value\n                          ? 'bg-white text-blue-600 shadow-md border border-blue-200'\n                          : 'text-gray-600 hover:text-gray-900 hover:bg-white'\n                      }`}\n                    >\n                      {range.label}\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Chart */}\n              {isLoading ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-4 border-blue-200 border-t-blue-600 mx-auto mb-4\"></div>\n                  <p className=\"text-gray-600\">Loading chart data...</p>\n                </div>\n              ) : error ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <TrendingDown className=\"w-10 h-10 text-red-600\" />\n                  </div>\n                  <p className=\"text-red-600 font-medium text-lg\">{error}</p>\n                  <button \n                    onClick={fetchChartData}\n                    className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n                  >\n                    Try Again\n                  </button>\n                </div>\n              ) : chartData.length > 0 ? (\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <LineChart data={chartData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                      <XAxis \n                        dataKey=\"date\" \n                        tickFormatter={(value) => new Date(value).toLocaleDateString()}\n                        stroke=\"#6b7280\"\n                      />\n                      <YAxis \n                        tickFormatter={(value) => `$${value.toFixed(2)}`}\n                        stroke=\"#6b7280\"\n                      />\n                      <Tooltip \n                        content={({ active, payload, label }) => {\n                          if (active && payload && payload.length) {\n                            const value = payload[0].value;\n                            const formattedValue = typeof value === 'number' ? value.toFixed(2) : String(value);\n                            return (\n                              <div className=\"bg-white p-3 border border-gray-200 rounded-lg shadow-lg\">\n                                <p className=\"font-medium text-gray-900\">{new Date(label).toLocaleDateString()}</p>\n                                <p className=\"text-blue-600\">{selectedSymbol}: ${formattedValue}</p>\n                              </div>\n                            )\n                          }\n                          return null\n                        }}\n                      />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"close\" \n                        stroke=\"#2563eb\" \n                        strokeWidth={2}\n                        dot={false}\n                      />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <BarChart3 className=\"w-20 h-20 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600 font-medium text-lg\">No chart data available</p>\n                  <p className=\"text-gray-500 mt-2\">Try selecting a different symbol or date range</p>\n                </div>\n              )}\n            </div>\n\n            {/* Simulation Section - Takes 2/5 of the width */}\n            <div className=\"xl:col-span-2 bg-white rounded-2xl border border-gray-100 p-6 shadow-xl\">\n              <Simulation selectedSymbol={selectedSymbol} />\n            </div>\n          </div>\n        )}\n\n        {/* Integrated Analysis Sections - Only show when symbol is selected */}\n        {selectedSymbol && (\n          <div className=\"space-y-8\">\n\n            \n            {/* Threshold Selector */}\n            <div className=\"bg-white rounded-2xl border border-gray-200 p-6 shadow-lg w-full\">\n              <div className=\"text-center mb-6\">\n                <h3 className=\"text-2xl font-bold text-gray-900\">Drawdown Threshold</h3>\n                <p className=\"text-gray-600 text-lg\">Set the threshold for cycle analysis</p>\n              </div>\n              \n              <div className=\"flex flex-col sm:flex-row gap-6 items-center justify-center\">\n                <div className=\"flex items-center gap-3\">\n                  <label className=\"text-lg font-semibold text-gray-700\">\n                    Current Threshold:\n                  </label>\n                  <div className=\"px-4 py-2 bg-blue-100 text-blue-800 rounded-full text-lg font-bold border border-blue-300\">\n                    {threshold}%\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-3\">\n                  <label className=\"text-lg font-semibold text-gray-700\">New Threshold:</label>\n                  <input\n                    type=\"number\"\n                    min=\"0.1\"\n                    max=\"99\"\n                    step=\"0.1\"\n                    placeholder=\"Enter % (e.g., 15.5)\"\n                    className=\"w-32 px-4 py-3 text-lg border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white\"\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter') {\n                        const input = e.target as HTMLInputElement;\n                        const value = parseFloat(input.value);\n                        if (value >= 0.1 && value <= 99) {\n                          setThreshold(value);\n                          input.value = '';\n                        }\n                      }\n                    }}\n                  />\n                  <span className=\"text-lg font-semibold text-gray-700\">%</span>\n                  <button\n                    onClick={() => {\n                      const input = document.querySelector('input[type=\"number\"]') as HTMLInputElement;\n                      if (input) {\n                        const value = parseFloat(input.value);\n                        if (value >= 0.1 && value <= 99) {\n                          setThreshold(value);\n                          input.value = '';\n                        }\n                      }\n                    }}\n                    className=\"px-6 py-3 bg-blue-600 text-white text-lg font-semibold rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors\"\n                  >\n                    Apply\n                  </button>\n                </div>\n              </div>\n              \n              <div className=\"text-center mt-4\">\n                <div className=\"text-sm text-gray-600\">\n                  💡 Enter any threshold from 0.1% to 99% and press Enter or click Apply\n                </div>\n              </div>\n            </div>\n\n            {/* Cycles Analysis Section */}\n            <div className=\"bg-white rounded-2xl border border-gray-100 p-6 shadow-xl w-full\">\n              <Cycles selectedSymbol={selectedSymbol} />\n            </div>\n\n\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n","import { ETFProvider } from './contexts/ETFContext'\nimport { ThresholdProvider } from './contexts/ThresholdContext'\nimport { DataProvider } from './contexts/DataContext'\nimport Dashboard from './pages/Dashboard'\n\nfunction App() {\n  return (\n    <ETFProvider>\n      <ThresholdProvider>\n        <DataProvider>\n          <Dashboard />\n        </DataProvider>\n      </ThresholdProvider>\n    </ETFProvider>\n  )\n}\n\n\n\nexport default App\n","import React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport App from './App.tsx'\r\nimport './index.css'\r\n\r\nReactDOM.createRoot(document.getElementById('root')!).render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n)\r\n"],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","client","_extends","target","i","source","key","Action","PopStateEventType","createBrowserHistory","options","createBrowserLocation","window","globalHistory","pathname","search","hash","createLocation","createBrowserHref","to","createPath","getUrlBasedHistory","invariant","value","message","createKey","getHistoryState","location","index","current","state","parsePath","_ref","path","parsedPath","hashIndex","searchIndex","getLocation","createHref","validateLocation","v5Compat","action","listener","getIndex","handlePop","nextIndex","delta","history","push","historyState","url","error","replace","createURL","base","href","fn","ResultType","stripBasename","basename","startIndex","nextChar","validMutationMethodsArr","validRequestMethodsArr","NavigationContext","React.createContext","LocationContext","useInRouterContext","React.useContext","logV6DeprecationWarnings","renderFuture","routerFuture","Router","_ref5","basenameProp","children","locationProp","navigationType","navigator","staticProp","future","UNSAFE_invariant","navigationContext","React.useMemo","locationContext","trailingPathname","React.createElement","REACT_ROUTER_VERSION","START_TRANSITION","startTransitionImpl","React","BrowserRouter","_ref4","historyRef","React.useRef","setStateImpl","React.useState","v7_startTransition","setState","React.useCallback","newState","React.useLayoutEffect","React.useEffect","UNSAFE_logV6DeprecationWarnings","DataRouterHook","DataRouterStateHook","ETFContext","createContext","useETF","context","useContext","ETFProvider","selectedETF","setSelectedETF","useState","availableETFs","setAvailableETFs","isLoading","setIsLoading","setError","fetchAvailableETFs","useCallback","response","data","isValidETF","symbol","etf","fetchStockData","useEffect","jsx","ThresholdContext","ThresholdProvider","threshold","setThreshold","availableThresholds","useThreshold","DataContext","DataProvider","cycles","setCycles","summary","setSummary","fetchCycles","err","fetchSummary","clearError","useData","defaultAttributes","toKebabCase","string","createLucideIcon","iconName","iconNode","Component","forwardRef","color","size","strokeWidth","absoluteStrokeWidth","className","rest","ref","createElement","tag","attrs","BarChart3","Calculator","Calendar","DollarSign","Download","RefreshCw","Search","TrendingDown","TrendingUp","X","Cycles","selectedSymbol","searchTerm","setSearchTerm","severityFilter","setSeverityFilter","sortField","setSortField","sortDirection","setSortDirection","selectedCycle","setSelectedCycle","currentPrice","setCurrentPrice","chartData","setChartData","fetchCurrentPrice","latestPrice","stooqResponse","stooqData","mostRecentCycle","fetchChartData","filteredCycles","cycle","matchesSearch","matchesSeverity","aValue","bValue","handleSort","field","exportToCSV","csvContent","calculateDuration","blob","getSeverityBadge","severity","formatDate","dateString","formatPrice","price","startDate","endDate","start","end","diffTime","formatChartDate","formatChartPrice","getCycleChartData","cycleStart","cycleEnd","paddingDays","paddedStart","paddedEnd","point","pointDate","jsxs","column","Fragment","ResponsiveContainer","ComposedChart","CartesianGrid","XAxis","YAxis","Tooltip","active","payload","label","formattedValue","Area","ReferenceLine","ReferenceArea","Simulation","etfLoading","selectedETFPair","setSelectedETFPair","availableETFPairs","setAvailableETFPairs","investmentAmount","setInvestmentAmount","setStartDate","setEndDate","simulationResult","setSimulationResult","showSymbolSelector","setShowSymbolSelector","symbolSearchTerm","setSymbolSearchTerm","monthlyInvestment","setMonthlyInvestment","useMonthlyInvestment","setUseMonthlyInvestment","showSmartStrategyOptions","setShowSmartStrategyOptions","smartStrategyThreshold","setSmartStrategyThreshold","secondarySymbol","setSecondarySymbol","showBaseSuggestions","setShowBaseSuggestions","showSecondarySuggestions","setShowSecondarySuggestions","prev","today","fiveYearsAgo","runSimulation","generatedPairs","knownLeveraged","leveraged","etf1","etf2","errorData","result","transformedResult","errorMessage","runSmartStrategy","formatCurrency","formatPercent","formatPercentShort","getReturnColor","getReturnBgColor","newBase","t","Dashboard","setSelectedSymbol","stockInfo","setStockInfo","showSymbolSuggestions","setShowSymbolSuggestions","selectedDateRange","setSelectedDateRange","searchResults","setSearchResults","dateRanges","handleSymbolSelect","searchSymbols","query","timeoutId","latest","earliest","change","changePercent","range","LineChart","Line","input","App","ReactDOM"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,9,10,11,12,13,14,15,16,17,18,19,20]}